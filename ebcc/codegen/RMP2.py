"""
Code generated by `albert`:
https://github.com/obackhouse/albert

  * date: 2024-09-29T15:16:33.671935
  * python version: 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
  * albert version: 0.0.0
  * caller: /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/albert/codegen/einsum.py
  * node: fv-az1788-690
  * system: Linux
  * processor: x86_64
  * release: 6.8.0-1014-azure
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, dirsum, Namespace


def energy(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-29T15:16:33.930687.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    e_mp : array
    """

    e_mp = einsum(t2, (0, 1, 2, 3), v.ovov, (0, 2, 1, 3), ()) * 2
    e_mp += einsum(t2, (0, 1, 2, 3), v.ovov, (0, 3, 1, 2), ()) * -1

    return e_mp

def make_rdm1_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-29T15:16:34.438301.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm1 : array
        One-particle reduced density matrix.
    """

    rdm1 = Namespace()
    delta = Namespace(
        oo=np.eye(t2.shape[0]),
        vv=np.eye(t2.shape[-1]),
    )
    tmp0 = np.copy(np.transpose(t2, (0, 1, 3, 2)))
    tmp0 += t2 * -0.5
    rdm1.vv = einsum(l2, (0, 1, 2, 3), tmp0, (2, 3, 1, 4), (0, 4)) * 4
    rdm1.oo = np.copy(delta.oo) * 2
    del delta
    rdm1.oo += einsum(l2, (0, 1, 2, 3), tmp0, (2, 4, 1, 0), (4, 3)) * -4
    del tmp0
    rdm1.ov = np.zeros((t2.shape[0], t2.shape[-1]))
    rdm1.vo = np.zeros((t2.shape[-1], t2.shape[0]))
    rdm1 = np.block([[rdm1.oo, rdm1.ov], [rdm1.vo, rdm1.vv]])

    return rdm1

def make_rdm2_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-29T15:16:34.617502.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm2 : array
        Two-particle reduced density matrix.
    """

    rdm2 = Namespace()
    rdm2.vvoo = np.copy(np.transpose(l2, (0, 1, 3, 2))) * -2
    rdm2.vvoo += l2 * 4
    rdm2.oovv = np.copy(np.transpose(t2, (0, 1, 3, 2))) * -2
    rdm2.oovv += t2 * 4
    rdm2.oooo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.ooov = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[-1]))
    rdm2.oovo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[-1], t2.shape[0]))
    rdm2.ovoo = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[0], t2.shape[0]))
    rdm2.vooo = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.ovov = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[0], t2.shape[-1]))
    rdm2.ovvo = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[-1], t2.shape[0]))
    rdm2.voov = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[0], t2.shape[-1]))
    rdm2.vovo = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[-1], t2.shape[0]))
    rdm2.ovvv = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[-1], t2.shape[-1]))
    rdm2.vovv = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[-1], t2.shape[-1]))
    rdm2.vvov = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[0], t2.shape[-1]))
    rdm2.vvvo = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[-1], t2.shape[0]))
    rdm2.vvvv = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[-1], t2.shape[-1]))
    rdm2 = pack_2e(rdm2.oooo, rdm2.ooov, rdm2.oovo, rdm2.ovoo, rdm2.vooo, rdm2.oovv, rdm2.ovov, rdm2.ovvo, rdm2.voov, rdm2.vovo, rdm2.vvoo, rdm2.ovvv, rdm2.vovv, rdm2.vvov, rdm2.vvvo, rdm2.vvvv)
    rdm2 = np.transpose(rdm2, (0, 2, 1, 3))
    rdm1 = make_rdm1_f(t2=t2, l2=l2)
    delta = np.diag(np.concatenate([np.ones(t2.shape[0]), np.zeros(t2.shape[-1])]))
    rdm1 -= delta * 2
    rdm2 += einsum(delta, (0, 1), rdm1, (3, 2), (0, 1, 2, 3)) * 2
    rdm2 += einsum(rdm1, (1, 0), delta, (2, 3), (0, 1, 2, 3)) * 2
    rdm2 -= einsum(delta, (0, 3), rdm1, (2, 1), (0, 1, 2, 3))
    rdm2 -= einsum(rdm1, (0, 3), delta, (1, 2), (0, 1, 2, 3))
    rdm2 += einsum(delta, (0, 1), delta, (2, 3), (0, 1, 2, 3)) * 4
    rdm2 -= einsum(delta, (0, 3), delta, (1, 2), (0, 1, 2, 3)) * 2

    return rdm2

def hbar_matvec_ip_intermediates(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-29T15:16:36.516300.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp2 : array
    tmp4 : array
    """

    tmp4 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 1, 3), (4, 0))
    tmp2 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 3, 1), (4, 0))

    return {f"tmp2": tmp2, f"tmp4": tmp4}

def hbar_matvec_ip(f=None, r1=None, r2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-29T15:16:36.519931.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp1 = np.copy(ints.tmp4) * 2
    del ints.tmp4
    tmp1 += ints.tmp2 * -1
    del ints.tmp2
    tmp2 = np.copy(f.oo) * 2
    tmp2 += tmp1
    tmp2 += np.transpose(tmp1, (1, 0))
    del tmp1
    tmp0 = np.copy(v.ooov)
    tmp0 += np.transpose(v.ovoo, (0, 2, 3, 1)) * -0.5
    r2new = einsum(r2, (0, 1, 2), f.vv, (3, 2), (0, 1, 3))
    r2new += einsum(r1, (0,), v.ovoo, (1, 2, 3, 0), (1, 3, 2))
    r2new += einsum(r2, (0, 1, 2), f.oo, (3, 0), (3, 1, 2)) * -1
    r2new += einsum(f.oo, (0, 1), r2, (2, 1, 3), (2, 0, 3)) * -1
    r1new = einsum(r2, (0, 1, 2), tmp0, (1, 3, 0, 2), (3,)) * 2
    del tmp0
    r1new += einsum(tmp2, (0, 1), r1, (0,), (1,)) * -0.5
    del tmp2

    return {f"r1new": r1new, f"r2new": r2new}

def hbar_matvec_ea_intermediates(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-29T15:16:38.480480.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp2 : array
    tmp4 : array
    """

    tmp4 = einsum(v.ovov, (0, 1, 2, 3), t2, (0, 2, 1, 4), (4, 3))
    tmp2 = einsum(v.ovov, (0, 1, 2, 3), t2, (0, 2, 3, 4), (4, 1))

    return {f"tmp2": tmp2, f"tmp4": tmp4}

def hbar_matvec_ea(f=None, r1=None, r2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-29T15:16:38.484090.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp1 = np.copy(ints.tmp4)
    del ints.tmp4
    tmp1 += ints.tmp2 * -0.5
    del ints.tmp2
    tmp2 = np.copy(f.vv)
    tmp2 += tmp1 * -1
    tmp2 += np.transpose(tmp1, (1, 0)) * -1
    del tmp1
    tmp0 = np.copy(v.ovvv) * 2
    tmp0 += np.transpose(v.ovvv, (0, 2, 1, 3)) * -1
    r2new = einsum(f.vv, (0, 1), r2, (1, 2, 3), (0, 2, 3))
    r2new += einsum(f.vv, (0, 1), r2, (2, 1, 3), (2, 0, 3))
    r2new += einsum(r1, (0,), v.ovvv, (1, 2, 3, 0), (2, 3, 1)) * -1
    r2new += einsum(f.oo, (0, 1), r2, (2, 3, 1), (2, 3, 0)) * -1
    r1new = einsum(r2, (0, 1, 2), tmp0, (2, 0, 1, 3), (3,)) * -1
    del tmp0
    r1new += einsum(r1, (0,), tmp2, (0, 1), (1,))
    del tmp2

    return {f"r1new": r1new, f"r2new": r2new}


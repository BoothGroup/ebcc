"""
Code generated by `albert`:
https://github.com/obackhouse/albert

  * date: 2024-08-15T22:37:51.702580
  * python version: 3.10.12 (main, Jul 29 2024, 16:56:48) [GCC 11.4.0]
  * albert version: 0.0.0
  * caller: /home/ollie/git/albert/albert/codegen/einsum.py
  * node: ollie-desktop
  * system: Linux
  * processor: x86_64
  * release: 6.8.0-40-generic
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, direct_sum, Namespace


def energy(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:51.850252.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    e_mp : array
    """

    e_mp = einsum(t2, (0, 1, 2, 3), v.ovov, (0, 2, 1, 3), ()) * 2
    e_mp += einsum(t2, (0, 1, 2, 3), v.ovov, (0, 3, 1, 2), ()) * -1

    return e_mp

def make_rdm1_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:52.177270.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm1 : array
        One-particle reduced density matrix.
    """

    rdm1 = Namespace()
    delta = Namespace(
        oo=np.eye(t2.shape[0]),
        vv=np.eye(t2.shape[-1]),
    )
    tmp0 = t2.transpose((0, 1, 3, 2)).copy()
    tmp0 += t2 * -0.5
    rdm1.vv = einsum(l2, (0, 1, 2, 3), tmp0, (2, 3, 1, 4), (0, 4)) * 4
    rdm1.oo = delta.oo.copy() * 2
    del delta
    rdm1.oo += einsum(tmp0, (0, 1, 2, 3), l2, (3, 2, 0, 4), (1, 4)) * -4
    del tmp0
    rdm1.ov = np.zeros((t2.shape[0], t2.shape[-1]))
    rdm1.vo = np.zeros((t2.shape[-1], t2.shape[0]))
    rdm1 = np.block([[rdm1.oo, rdm1.ov], [rdm1.vo, rdm1.vv]])

    return rdm1

def make_rdm2_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:52.522286.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm2 : array
        Two-particle reduced density matrix.
    """

    rdm2 = Namespace()
    delta = Namespace(
        oo=np.eye(t2.shape[0]),
        vv=np.eye(t2.shape[-1]),
    )
    rdm2.vvoo = l2.transpose((3, 2, 0, 1)).copy() * -0.25
    rdm2.vvoo += l2.transpose((2, 3, 0, 1)) * 0.25
    rdm2.vvoo += l2.transpose((2, 3, 0, 1)) * 0.25
    rdm2.vvoo += l2.transpose((2, 3, 0, 1)) * 0.25
    rdm2.vvoo += l2.transpose((3, 2, 0, 1)) * -0.25
    rdm2.vvoo += l2.transpose((2, 3, 0, 1)) * 0.25
    rdm2.oovv = t2.transpose((0, 1, 3, 2)).copy() * -0.25
    rdm2.oovv += t2 * 0.25
    rdm2.oovv += t2 * 0.25
    rdm2.oovv += t2 * 0.25
    rdm2.oovv += t2.transpose((0, 1, 3, 2)) * -0.25
    rdm2.oovv += t2 * 0.25
    rdm2.oooo = einsum(delta.oo, (0, 1), delta.oo, (2, 3), (0, 2, 1, 3))
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (2, 0, 1, 3)) * -1
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (0, 2, 1, 3))
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (0, 2, 1, 3))
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (0, 2, 1, 3))
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (2, 0, 1, 3)) * -1
    del delta
    rdm2.oooo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.oovv = np.zeros((t2.shape[0], t2.shape[0], t2.shape[-1], t2.shape[-1]))
    rdm2.vvoo = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[0], t2.shape[0]))
    rdm2 = pack_2e(rdm2.oooo, rdm2.ooov, rdm2.oovo, rdm2.ovoo, rdm2.vooo, rdm2.oovv, rdm2.ovov, rdm2.ovvo, rdm2.voov, rdm2.vovo, rdm2.vvoo, rdm2.ovvv, rdm2.vovv, rdm2.vvov, rdm2.vvvo, rdm2.vvvv)
    rdm2 = rdm2.swapaxes(1, 2)

    return rdm2

def hbar_matvec_ip_intermediates(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:53.347328.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp2 : array
    tmp4 : array
    """

    tmp4 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 1, 3), (4, 0))
    tmp2 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 3, 1), (4, 0))

    return {f"tmp2": tmp2, f"tmp4": tmp4}

def hbar_matvec_ip(f=None, r1=None, r2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:53.349251.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp1 = f.oo.copy()
    tmp1 += ints.tmp4.transpose((1, 0)) * 2
    del ints.tmp4
    tmp1 += ints.tmp2.transpose((1, 0)) * -1
    del ints.tmp2
    tmp0 = v.ooov.copy() * -0.5
    tmp0 += v.ovoo.transpose((0, 2, 3, 1))
    r2new = einsum(v.ovoo, (0, 1, 2, 3), r1, (3,), (0, 2, 1))
    r2new += einsum(f.oo, (0, 1), r2, (1, 2, 3), (0, 2, 3)) * -1
    r2new += einsum(r2, (0, 1, 2), f.oo, (3, 1), (0, 3, 2)) * -1
    r2new += einsum(r2, (0, 1, 2), f.vv, (3, 2), (0, 1, 3))
    r1new = einsum(tmp0, (0, 1, 2, 3), r2, (0, 2, 3), (1,)) * 2
    del tmp0
    r1new += einsum(r1, (0,), tmp1, (0, 1), (1,)) * -1
    del tmp1

    return {f"r1new": r1new, f"r2new": r2new}

def hbar_matvec_ea_intermediates(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:54.185757.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp2 : array
    tmp4 : array
    """

    tmp4 = einsum(t2, (0, 1, 2, 3), v.ovov, (0, 2, 1, 4), (3, 4))
    tmp2 = einsum(t2, (0, 1, 2, 3), v.ovov, (0, 4, 1, 2), (3, 4))

    return {f"tmp2": tmp2, f"tmp4": tmp4}

def hbar_matvec_ea(f=None, r1=None, r2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:54.187740.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp1 = f.vv.copy()
    tmp1 += ints.tmp2.transpose((1, 0))
    del ints.tmp2
    tmp1 += ints.tmp4.transpose((1, 0)) * -2
    del ints.tmp4
    tmp0 = v.ovvv.copy() * -1
    tmp0 += v.ovvv.transpose((0, 2, 1, 3)) * 2
    r2new = einsum(r2, (0, 1, 2), f.vv, (3, 0), (3, 1, 2))
    r2new += einsum(r2, (0, 1, 2), f.vv, (3, 1), (0, 3, 2))
    r2new += einsum(v.ovvv, (0, 1, 2, 3), r1, (3,), (1, 2, 0)) * -1
    r2new += einsum(r2, (0, 1, 2), f.oo, (3, 2), (0, 1, 3)) * -1
    r1new = einsum(tmp0, (0, 1, 2, 3), r2, (2, 1, 0), (3,)) * -1
    del tmp0
    r1new += einsum(r1, (0,), tmp1, (0, 1), (1,))
    del tmp1

    return {f"r1new": r1new, f"r2new": r2new}

def hbar_matvec_ee_intermediates(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:57.257740.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp11 : array
    tmp13 : array
    tmp2 : array
    tmp4 : array
    """

    tmp13 = einsum(t2, (0, 1, 2, 3), v.ovov, (4, 2, 1, 3), (0, 4))
    tmp11 = einsum(t2, (0, 1, 2, 3), v.ovov, (4, 3, 1, 2), (0, 4))
    tmp4 = einsum(t2, (0, 1, 2, 3), v.ovov, (0, 4, 1, 3), (2, 4))
    tmp2 = einsum(t2, (0, 1, 2, 3), v.ovov, (0, 3, 1, 4), (2, 4))

    return {f"tmp11": tmp11, f"tmp13": tmp13, f"tmp2": tmp2, f"tmp4": tmp4}

def hbar_matvec_ee(f=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-15T22:37:57.262019.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp9 = einsum(r2, (0, 1, 2, 3), v.oovv, (4, 1, 5, 2), (0, 4, 3, 5))
    tmp8 = einsum(f.oo, (0, 1), r2, (2, 1, 3, 4), (0, 2, 3, 4))
    tmp13 = einsum(r2, (0, 1, 2, 3), v.oovv, (4, 1, 5, 3), (0, 4, 2, 5))
    tmp14 = einsum(r2, (0, 1, 2, 3), v.ovov, (4, 5, 1, 2), (0, 4, 3, 5))
    tmp2 = v.ovov.transpose((0, 2, 3, 1)).copy()
    tmp2 += v.ovov.transpose((0, 2, 1, 3)) * -0.5
    tmp10 = tmp8.copy()
    del tmp8
    tmp10 += tmp9
    del tmp9
    tmp12 = einsum(r2, (0, 1, 2, 3), v.ovov, (4, 5, 1, 3), (0, 4, 2, 5))
    tmp15 = tmp13.copy()
    del tmp13
    tmp15 += tmp14
    del tmp14
    tmp11 = einsum(r2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2))
    tmp3 = einsum(tmp2, (0, 1, 2, 3), r1, (0, 3), (1, 2))
    del tmp2
    tmp1 = v.ooov.copy()
    tmp1 += v.ovoo.transpose((0, 2, 3, 1)) * -0.5
    tmp0 = v.ovvv.copy() * -0.5
    tmp0 += v.ovvv.transpose((0, 2, 1, 3))
    tmp4 = t2.transpose((0, 1, 3, 2)).copy() * 2
    tmp4 += t2 * -1
    tmp6 = f.vv.copy()
    tmp6 += ints.tmp2.transpose((1, 0))
    del ints.tmp2
    tmp6 += ints.tmp4.transpose((1, 0)) * -2
    del ints.tmp4
    tmp5 = v.ovov.transpose((0, 2, 1, 3)).copy()
    tmp5 += v.oovv * -0.5
    tmp7 = f.oo.copy()
    tmp7 += ints.tmp13.transpose((1, 0)) * 2
    del ints.tmp13
    tmp7 += ints.tmp11.transpose((1, 0)) * -1
    del ints.tmp11
    r2new = einsum(r2, (0, 1, 2, 3), v.oooo, (4, 0, 5, 1), (4, 5, 2, 3))
    r2new += einsum(r2, (0, 1, 2, 3), v.vvvv, (4, 2, 5, 3), (0, 1, 4, 5))
    r2new += tmp10.transpose((0, 1, 3, 2)) * -1
    r2new += tmp10.transpose((1, 0, 2, 3)) * -1
    del tmp10
    r2new += tmp11.transpose((0, 1, 3, 2))
    r2new += tmp11.transpose((1, 0, 2, 3))
    del tmp11
    r2new += tmp12 * 2
    r2new += tmp12.transpose((1, 0, 3, 2)) * 2
    del tmp12
    r2new += tmp15 * -1
    r2new += tmp15.transpose((1, 0, 3, 2)) * -1
    del tmp15
    r1new = einsum(tmp0, (0, 1, 2, 3), r2, (4, 0, 1, 2), (4, 3)) * 2
    del tmp0
    r1new += einsum(r2, (0, 1, 2, 3), tmp1, (1, 4, 0, 2), (4, 3)) * -2
    del tmp1
    r1new += einsum(tmp3, (0, 1), tmp4, (0, 2, 3, 1), (2, 3)) * 2
    del tmp3, tmp4
    r1new += einsum(tmp5, (0, 1, 2, 3), r1, (0, 2), (1, 3)) * 2
    del tmp5
    r1new += einsum(r1, (0, 1), tmp6, (1, 2), (0, 2))
    del tmp6
    r1new += einsum(tmp7, (0, 1), r1, (0, 2), (1, 2)) * -1
    del tmp7

    return {f"r1new": r1new, f"r2new": r2new}


"""
Code generated by `albert`:
https://github.com/obackhouse/albert

  * date: 2024-09-28T12:25:27.549208
  * python version: 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
  * albert version: 0.0.0
  * caller: /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/albert/codegen/einsum.py
  * node: fv-az1272-977
  * system: Linux
  * processor: x86_64
  * release: 6.8.0-1014-azure
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, dirsum, Namespace


def energy(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:25:28.107837.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    e_cc : float
        Coupled cluster energy.
    """

    tmp0 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * 2
    tmp0 += t2 * -1
    tmp1 = einsum(tmp0, (0, 1, 2, 3), v.xov, (4, 0, 3), (1, 2, 4)) * 0.5
    del tmp0
    e_cc = einsum(v.xov, (0, 1, 2), tmp1, (1, 2, 0), ()) * 2
    del tmp1

    return e_cc

def update_amps(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:25:33.723484.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    t2new : array
        Updated T2 residuals.
    """

    tmp2 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 2), (0, 3, 4))
    tmp14 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * 2
    tmp14 += t2 * -1
    tmp9 = np.copy(np.transpose(v.xov, (1, 2, 0)))
    tmp9 += tmp2 * -1
    tmp1 = einsum(v.xov, (0, 1, 2), v.xov, (0, 3, 4), (1, 3, 2, 4))
    tmp15 = einsum(tmp14, (0, 1, 2, 3), v.xov, (4, 0, 3), (1, 2, 4))
    del tmp14
    tmp5 = einsum(v.xvv, (0, 1, 2), v.xoo, (0, 3, 4), (3, 4, 1, 2))
    tmp10 = einsum(v.xov, (0, 1, 2), tmp9, (3, 4, 0), (1, 3, 2, 4))
    del tmp9
    tmp3 = einsum(tmp1, (0, 1, 2, 3), t2, (4, 0, 3, 5), (4, 1, 5, 2))
    tmp16 = einsum(v.xov, (0, 1, 2), tmp15, (1, 3, 0), (2, 3)) * 0.5
    tmp18 = einsum(tmp15, (0, 1, 2), v.xov, (2, 3, 1), (3, 0))
    del tmp15
    tmp11 = np.copy(np.transpose(tmp5, (1, 0, 3, 2)))
    tmp11 += tmp3 * -1
    tmp11 += np.transpose(tmp10, (1, 0, 3, 2)) * -2
    del tmp10
    tmp17 = einsum(t2, (0, 1, 2, 3), tmp16, (2, 4), (0, 1, 3, 4)) * 2
    del tmp16
    tmp19 = einsum(tmp18, (0, 1), t2, (2, 0, 3, 4), (2, 1, 4, 3))
    del tmp18
    tmp12 = einsum(tmp11, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    del tmp11
    tmp8 = einsum(tmp2, (0, 1, 2), v.xov, (2, 3, 4), (0, 3, 1, 4))
    tmp23 = np.copy(np.transpose(tmp1, (1, 0, 2, 3))) * -1
    tmp23 += np.transpose(tmp1, (1, 0, 3, 2)) * 2
    tmp4 = einsum(t2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2))
    tmp6 = einsum(t2, (0, 1, 2, 3), tmp5, (4, 1, 5, 2), (0, 4, 3, 5))
    del tmp5
    tmp20 = np.copy(np.transpose(tmp17, (1, 0, 2, 3)))
    del tmp17
    tmp20 += np.transpose(tmp19, (0, 1, 3, 2))
    del tmp19
    tmp13 = np.copy(tmp8)
    del tmp8
    tmp13 += tmp12
    del tmp12
    tmp0 = einsum(v.xvv, (0, 1, 2), v.xvv, (0, 3, 4), (1, 3, 4, 2))
    tmp24 = einsum(tmp23, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 1, 5, 3))
    del tmp23
    tmp22 = einsum(v.xoo, (0, 1, 2), v.xoo, (0, 3, 4), (1, 3, 4, 2))
    tmp22 += einsum(tmp1, (0, 1, 2, 3), t2, (4, 5, 3, 2), (0, 4, 1, 5))
    tmp21 = einsum(f.oo, (0, 1), t2, (2, 1, 3, 4), (0, 2, 3, 4))
    tmp7 = np.copy(tmp4)
    del tmp4
    tmp7 += tmp6 * -1
    del tmp6
    t2new = einsum(tmp0, (0, 1, 2, 3), t2, (4, 5, 3, 1), (4, 5, 0, 2))
    del tmp0
    t2new += np.transpose(tmp1, (1, 0, 3, 2))
    del tmp1
    t2new += einsum(tmp2, (0, 1, 2), tmp2, (3, 4, 2), (3, 0, 4, 1))
    del tmp2
    t2new += einsum(tmp3, (0, 1, 2, 3), t2, (4, 1, 3, 5), (4, 0, 2, 5))
    del tmp3
    t2new += np.transpose(tmp7, (0, 1, 3, 2))
    t2new += np.transpose(tmp7, (1, 0, 2, 3))
    del tmp7
    t2new += tmp13 * -1
    t2new += np.transpose(tmp13, (1, 0, 3, 2)) * -1
    del tmp13
    t2new += tmp20 * -1
    t2new += np.transpose(tmp20, (1, 0, 3, 2)) * -1
    del tmp20
    t2new += np.transpose(tmp21, (0, 1, 3, 2)) * -1
    t2new += np.transpose(tmp21, (1, 0, 2, 3)) * -1
    del tmp21
    t2new += einsum(t2, (0, 1, 2, 3), tmp22, (0, 4, 1, 5), (4, 5, 3, 2))
    del tmp22
    t2new += einsum(tmp24, (0, 1, 2, 3), t2, (4, 1, 5, 3), (0, 4, 2, 5)) * 2
    del tmp24

    return {f"t2new": t2new}

def update_lams(f=None, l2=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:25:41.467777.

    Parameters
    ----------
    f : array
        Fock matrix.
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    l2new : array
        Updated L2 residuals.
    """

    tmp17 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * 2
    tmp17 += t2 * -1
    tmp13 = np.copy(np.transpose(l2, (3, 2, 0, 1))) * -1
    tmp13 += np.transpose(l2, (2, 3, 0, 1)) * 2
    tmp18 = einsum(tmp17, (0, 1, 2, 3), v.xov, (4, 0, 3), (1, 2, 4))
    del tmp17
    tmp1 = einsum(v.xov, (0, 1, 2), v.xov, (0, 3, 4), (1, 3, 2, 4))
    tmp32 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * 2
    tmp32 += t2 * -1
    tmp24 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * -0.5
    tmp24 += t2
    tmp12 = einsum(l2, (0, 1, 2, 3), t2, (4, 3, 1, 5), (2, 4, 0, 5))
    tmp14 = einsum(tmp13, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 1, 5, 3))
    del tmp13
    tmp20 = np.copy(np.transpose(l2, (3, 2, 0, 1))) * 2
    tmp20 += np.transpose(l2, (2, 3, 0, 1)) * -1
    tmp19 = np.copy(np.transpose(v.xov, (1, 2, 0)))
    tmp19 += tmp18
    del tmp18
    tmp7 = einsum(tmp1, (0, 1, 2, 3), t2, (4, 1, 2, 5), (4, 0, 5, 3))
    tmp6 = einsum(v.xvv, (0, 1, 2), v.xoo, (0, 3, 4), (3, 4, 1, 2))
    tmp33 = einsum(tmp32, (0, 1, 2, 3), v.xov, (4, 0, 3), (1, 2, 4))
    del tmp32
    tmp28 = einsum(tmp24, (0, 1, 2, 3), l2, (4, 3, 0, 1), (4, 2)) * 2
    tmp25 = einsum(l2, (0, 1, 2, 3), tmp24, (2, 4, 0, 1), (3, 4)) * 2
    del tmp24
    tmp15 = np.copy(tmp12)
    del tmp12
    tmp15 += np.transpose(tmp14, (1, 0, 3, 2)) * -1
    del tmp14
    tmp21 = einsum(tmp19, (0, 1, 2), tmp20, (0, 3, 4, 1), (3, 4, 2))
    del tmp19, tmp20
    tmp8 = np.copy(np.transpose(tmp6, (1, 0, 3, 2))) * -1
    tmp8 += tmp7
    del tmp7
    tmp36 = einsum(v.xov, (0, 1, 2), tmp33, (3, 2, 0), (1, 3))
    tmp34 = einsum(v.xov, (0, 1, 2), tmp33, (1, 3, 0), (2, 3)) * 0.5
    del tmp33
    tmp29 = einsum(tmp28, (0, 1), v.xov, (2, 3, 1), (3, 0, 2))
    del tmp28
    tmp26 = einsum(v.xov, (0, 1, 2), tmp25, (3, 1), (3, 2, 0)) * 0.5
    del tmp25
    tmp16 = einsum(tmp1, (0, 1, 2, 3), tmp15, (4, 0, 5, 3), (1, 4, 2, 5))
    del tmp15
    tmp22 = einsum(v.xov, (0, 1, 2), tmp21, (3, 4, 0), (1, 3, 2, 4))
    del tmp21
    tmp11 = einsum(l2, (0, 1, 2, 3), tmp6, (4, 3, 5, 1), (2, 4, 0, 5))
    del tmp6
    tmp5 = einsum(l2, (0, 1, 2, 3), f.vv, (4, 1), (2, 3, 4, 0))
    tmp9 = einsum(tmp8, (0, 1, 2, 3), l2, (4, 2, 0, 5), (5, 1, 4, 3))
    del tmp8
    tmp37 = einsum(tmp36, (0, 1), l2, (2, 3, 1, 4), (0, 4, 2, 3))
    del tmp36
    tmp35 = einsum(tmp34, (0, 1), l2, (2, 1, 3, 4), (4, 3, 2, 0)) * 2
    del tmp34
    tmp30 = einsum(v.xov, (0, 1, 2), tmp29, (3, 4, 0), (1, 3, 2, 4))
    del tmp29
    tmp27 = einsum(v.xov, (0, 1, 2), tmp26, (3, 4, 0), (1, 3, 2, 4)) * 2
    del tmp26
    tmp4 = einsum(v.xoo, (0, 1, 2), v.xoo, (0, 3, 4), (1, 3, 4, 2))
    tmp23 = np.copy(tmp11)
    del tmp11
    tmp23 += np.transpose(tmp16, (1, 0, 3, 2)) * -1
    del tmp16
    tmp23 += np.transpose(tmp22, (1, 0, 3, 2)) * -1
    del tmp22
    tmp39 = einsum(l2, (0, 1, 2, 3), f.oo, (4, 3), (4, 2, 0, 1))
    tmp0 = einsum(v.xvv, (0, 1, 2), v.xvv, (0, 3, 4), (1, 3, 4, 2))
    tmp2 = einsum(t2, (0, 1, 2, 3), l2, (3, 2, 4, 5), (5, 4, 0, 1))
    tmp3 = einsum(tmp1, (0, 1, 2, 3), t2, (4, 5, 2, 3), (4, 5, 0, 1))
    tmp10 = np.copy(tmp5)
    del tmp5
    tmp10 += tmp9
    del tmp9
    tmp38 = np.copy(np.transpose(tmp35, (1, 0, 2, 3)))
    del tmp35
    tmp38 += np.transpose(tmp37, (1, 0, 3, 2))
    del tmp37
    tmp31 = np.copy(np.transpose(tmp27, (1, 0, 2, 3)))
    del tmp27
    tmp31 += np.transpose(tmp30, (0, 1, 3, 2))
    del tmp30
    l2new = einsum(tmp0, (0, 1, 2, 3), l2, (1, 3, 4, 5), (2, 0, 4, 5))
    del tmp0
    l2new += np.transpose(tmp1, (3, 2, 1, 0))
    l2new += einsum(tmp2, (0, 1, 2, 3), tmp1, (2, 3, 4, 5), (5, 4, 1, 0))
    del tmp1, tmp2
    l2new += einsum(l2, (0, 1, 2, 3), tmp3, (2, 3, 4, 5), (0, 1, 4, 5))
    del tmp3
    l2new += einsum(tmp4, (0, 1, 2, 3), l2, (4, 5, 3, 1), (4, 5, 0, 2))
    del tmp4
    l2new += np.transpose(tmp10, (3, 2, 0, 1))
    l2new += np.transpose(tmp10, (2, 3, 1, 0))
    del tmp10
    l2new += np.transpose(tmp23, (2, 3, 0, 1)) * -1
    l2new += np.transpose(tmp23, (3, 2, 1, 0)) * -1
    del tmp23
    l2new += np.transpose(tmp31, (3, 2, 0, 1)) * -1
    l2new += np.transpose(tmp31, (2, 3, 1, 0)) * -1
    del tmp31
    l2new += np.transpose(tmp38, (2, 3, 0, 1)) * -1
    l2new += np.transpose(tmp38, (3, 2, 1, 0)) * -1
    del tmp38
    l2new += np.transpose(tmp39, (3, 2, 0, 1)) * -1
    l2new += np.transpose(tmp39, (2, 3, 1, 0)) * -1
    del tmp39

    return {f"l2new": l2new}

def make_rdm1_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:25:42.044863.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm1 : array
        One-particle reduced density matrix.
    """

    rdm1 = Namespace()
    delta = Namespace(
        oo=np.eye(t2.shape[0]),
        vv=np.eye(t2.shape[-1]),
    )
    tmp0 = np.copy(np.transpose(t2, (0, 1, 3, 2)))
    tmp0 += t2 * -0.5
    rdm1.vv = einsum(tmp0, (0, 1, 2, 3), l2, (4, 3, 1, 0), (4, 2)) * 4
    rdm1.oo = np.copy(delta.oo) * 2
    del delta
    rdm1.oo += einsum(tmp0, (0, 1, 2, 3), l2, (3, 2, 0, 4), (1, 4)) * -4
    del tmp0
    rdm1.ov = np.zeros((t2.shape[0], t2.shape[-1]))
    rdm1.vo = np.zeros((t2.shape[-1], t2.shape[0]))
    rdm1 = np.block([[rdm1.oo, rdm1.ov], [rdm1.vo, rdm1.vv]])

    return rdm1

def make_rdm2_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:26:00.411750.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm2 : array
        Two-particle reduced density matrix.
    """

    rdm2 = Namespace()
    delta = Namespace(
        oo=np.eye(t2.shape[0]),
        vv=np.eye(t2.shape[-1]),
    )
    tmp3 = np.copy(np.transpose(l2, (3, 2, 0, 1))) * -1
    tmp3 += np.transpose(l2, (2, 3, 0, 1)) * 2
    tmp6 = np.copy(np.transpose(l2, (3, 2, 0, 1))) * -1
    tmp6 += np.transpose(l2, (2, 3, 0, 1))
    tmp0 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * -0.5
    tmp0 += t2
    tmp13 = np.copy(np.transpose(l2, (3, 2, 0, 1))) * 2
    tmp13 += np.transpose(l2, (2, 3, 0, 1)) * -1
    tmp4 = einsum(tmp3, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 1, 5, 3))
    tmp7 = einsum(t2, (0, 1, 2, 3), tmp6, (1, 4, 2, 5), (0, 4, 3, 5))
    del tmp6
    tmp1 = einsum(l2, (0, 1, 2, 3), tmp0, (2, 4, 0, 1), (3, 4)) * 2
    del tmp0
    tmp14 = einsum(tmp13, (0, 1, 2, 3), t2, (0, 1, 4, 2), (4, 3)) * 0.5
    tmp27 = np.copy(np.transpose(l2, (3, 2, 0, 1)))
    tmp27 += np.transpose(l2, (2, 3, 0, 1)) * -1
    tmp22 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * -1
    tmp22 += t2
    tmp24 = np.copy(np.transpose(t2, (0, 1, 3, 2))) * -1
    tmp24 += t2 * 2
    tmp5 = einsum(tmp4, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    tmp8 = einsum(t2, (0, 1, 2, 3), tmp7, (4, 1, 5, 2), (0, 4, 3, 5))
    tmp2 = einsum(l2, (0, 1, 2, 3), t2, (4, 5, 0, 1), (2, 3, 4, 5))
    tmp18 = einsum(l2, (0, 1, 2, 3), t2, (4, 3, 1, 5), (2, 4, 0, 5))
    tmp10 = einsum(t2, (0, 1, 2, 3), tmp3, (1, 4, 2, 5), (0, 4, 3, 5))
    del tmp3
    tmp20 = einsum(t2, (0, 1, 2, 3), l2, (4, 2, 1, 5), (5, 0, 4, 3))
    tmp16 = einsum(tmp1, (0, 1), t2, (2, 0, 3, 4), (2, 1, 4, 3))
    tmp15 = einsum(t2, (0, 1, 2, 3), tmp14, (4, 2), (0, 1, 3, 4)) * 2
    tmp29 = einsum(t2, (0, 1, 2, 3), l2, (4, 5, 1, 0), (4, 5, 3, 2))
    tmp28 = einsum(t2, (0, 1, 2, 3), tmp27, (1, 4, 2, 5), (0, 4, 3, 5))
    del tmp27
    tmp26 = einsum(tmp13, (0, 1, 2, 3), t2, (0, 1, 4, 2), (4, 3))
    del tmp13
    tmp23 = einsum(tmp22, (0, 1, 2, 3), l2, (4, 2, 0, 5), (5, 1, 4, 3))
    del tmp22
    tmp25 = einsum(l2, (0, 1, 2, 3), tmp24, (3, 4, 1, 5), (2, 4, 0, 5))
    del tmp24
    tmp9 = np.copy(tmp5) * 2
    tmp9 += np.transpose(tmp8, (1, 0, 3, 2))
    del tmp8
    tmp12 = einsum(t2, (0, 1, 2, 3), tmp2, (1, 0, 4, 5), (4, 5, 3, 2))
    tmp19 = einsum(t2, (0, 1, 2, 3), tmp18, (1, 4, 2, 5), (0, 4, 3, 5))
    tmp11 = einsum(tmp10, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    del tmp10
    tmp21 = einsum(tmp20, (0, 1, 2, 3), t2, (4, 0, 2, 5), (4, 1, 5, 3))
    tmp17 = np.copy(np.transpose(tmp15, (1, 0, 2, 3)))
    del tmp15
    tmp17 += np.transpose(tmp16, (0, 1, 3, 2))
    del tmp16
    rdm2.vvvv = np.copy(np.transpose(tmp29, (1, 0, 2, 3))) * -2
    rdm2.vvvv += np.transpose(tmp29, (1, 0, 3, 2)) * 4
    del tmp29
    rdm2.vvoo = np.copy(np.transpose(l2, (0, 1, 3, 2))) * -2
    rdm2.vvoo += l2 * 4
    rdm2.vovo = np.copy(np.transpose(tmp4, (3, 0, 2, 1))) * -2
    rdm2.vovo += np.transpose(tmp28, (3, 0, 2, 1)) * -2
    del tmp28
    rdm2.vovo += einsum(tmp26, (0, 1), delta.oo, (2, 3), (1, 2, 0, 3)) * 4
    rdm2.vovo += np.transpose(tmp20, (2, 1, 3, 0)) * -2
    rdm2.voov = np.copy(np.transpose(tmp25, (2, 1, 0, 3))) * 2
    rdm2.voov += np.transpose(tmp23, (2, 1, 0, 3)) * -2
    rdm2.voov += einsum(tmp26, (0, 1), delta.oo, (2, 3), (1, 2, 3, 0)) * -2
    del tmp26
    rdm2.voov += np.transpose(tmp18, (2, 1, 0, 3)) * -2
    rdm2.voov += np.transpose(tmp4, (3, 0, 1, 2)) * 2
    rdm2.ovvo = np.copy(np.transpose(tmp4, (0, 3, 2, 1))) * 4
    del tmp4
    rdm2.ovvo += np.transpose(tmp7, (0, 3, 2, 1)) * -2
    del tmp7
    rdm2.ovvo += einsum(tmp14, (0, 1), delta.oo, (2, 3), (2, 1, 0, 3)) * -4
    rdm2.ovvo += np.transpose(tmp18, (1, 2, 3, 0)) * -2
    del tmp18
    rdm2.ovov = np.copy(np.transpose(tmp23, (1, 2, 0, 3))) * 2
    del tmp23
    rdm2.ovov += np.transpose(tmp25, (1, 2, 0, 3)) * -2
    del tmp25
    rdm2.ovov += einsum(tmp14, (0, 1), delta.oo, (2, 3), (2, 1, 3, 0)) * 8
    del tmp14
    rdm2.ovov += np.transpose(tmp20, (1, 2, 0, 3)) * -2
    del tmp20
    rdm2.oovv = np.copy(tmp9) * 2
    rdm2.oovv += np.transpose(tmp9, (0, 1, 3, 2)) * -2
    del tmp9
    rdm2.oovv += tmp11 * -4
    rdm2.oovv += np.transpose(tmp11, (0, 1, 3, 2)) * 2
    rdm2.oovv += np.transpose(tmp11, (1, 0, 2, 3)) * 2
    rdm2.oovv += np.transpose(tmp11, (1, 0, 3, 2)) * -4
    del tmp11
    rdm2.oovv += tmp12 * 4
    rdm2.oovv += np.transpose(tmp12, (0, 1, 3, 2)) * -2
    del tmp12
    rdm2.oovv += tmp17 * -4
    rdm2.oovv += np.transpose(tmp17, (0, 1, 3, 2)) * 2
    rdm2.oovv += np.transpose(tmp17, (1, 0, 2, 3)) * 2
    rdm2.oovv += np.transpose(tmp17, (1, 0, 3, 2)) * -4
    del tmp17
    rdm2.oovv += np.transpose(t2, (0, 1, 3, 2)) * -2
    rdm2.oovv += t2 * 4
    rdm2.oovv += tmp19 * 2
    del tmp19
    rdm2.oovv += np.transpose(tmp21, (0, 1, 3, 2)) * 2
    del tmp21
    rdm2.oovv += np.transpose(tmp5, (1, 0, 3, 2)) * 4
    del tmp5
    rdm2.oooo = einsum(delta.oo, (0, 1), tmp1, (2, 3), (3, 0, 2, 1)) * -4
    rdm2.oooo += einsum(delta.oo, (0, 1), tmp1, (2, 3), (0, 3, 2, 1)) * 2
    rdm2.oooo += einsum(delta.oo, (0, 1), tmp1, (2, 3), (3, 0, 1, 2)) * 2
    rdm2.oooo += einsum(tmp1, (0, 1), delta.oo, (2, 3), (2, 1, 3, 0)) * -4
    del tmp1
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (0, 2, 1, 3)) * 4
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (2, 0, 1, 3)) * -2
    del delta
    rdm2.oooo += np.transpose(tmp2, (2, 3, 1, 0)) * -2
    rdm2.oooo += np.transpose(tmp2, (3, 2, 1, 0)) * 4
    del tmp2
    rdm2.ooov = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[-1]))
    rdm2.oovo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[-1], t2.shape[0]))
    rdm2.ovoo = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[0], t2.shape[0]))
    rdm2.vooo = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.ovvv = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[-1], t2.shape[-1]))
    rdm2.vovv = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[-1], t2.shape[-1]))
    rdm2.vvov = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[0], t2.shape[-1]))
    rdm2.vvvo = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[-1], t2.shape[0]))
    rdm2 = pack_2e(rdm2.oooo, rdm2.ooov, rdm2.oovo, rdm2.ovoo, rdm2.vooo, rdm2.oovv, rdm2.ovov, rdm2.ovvo, rdm2.voov, rdm2.vovo, rdm2.vvoo, rdm2.ovvv, rdm2.vovv, rdm2.vvov, rdm2.vvvo, rdm2.vvvv)
    rdm2 = np.transpose(rdm2, (0, 2, 1, 3))

    return rdm2

def hbar_matvec_ip_intermediates(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:26:12.977476.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp0 : array
    tmp13 : array
    tmp15 : array
    tmp16 : array
    tmp18 : array
    tmp23 : array
    tmp24 : array
    tmp25 : array
    tmp27 : array
    tmp28 : array
    tmp3 : array
    tmp30 : array
    tmp31 : array
    tmp32 : array
    tmp37 : array
    tmp38 : array
    tmp39 : array
    tmp4 : array
    tmp40 : array
    tmp41 : array
    tmp43 : array
    tmp49 : array
    tmp50 : array
    tmp6 : array
    tmp7 : array
    """

    tmp3 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 2), (0, 3, 4))
    tmp6 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 3), (0, 2, 4))
    tmp0 = einsum(v.xoo, (0, 1, 2), v.xov, (0, 3, 4), (1, 2, 3, 4))
    tmp15 = einsum(v.xov, (0, 1, 2), v.xov, (0, 3, 4), (1, 3, 2, 4))
    tmp12 = einsum(v.xvv, (0, 1, 2), v.xov, (0, 3, 4), (3, 1, 2, 4))
    tmp50 = einsum(v.xvv, (0, 1, 2), tmp3, (3, 2, 0), (3, 1))
    tmp49 = einsum(v.xvv, (0, 1, 2), tmp6, (3, 2, 0), (3, 1))
    tmp43 = einsum(tmp6, (0, 1, 2), v.xov, (2, 0, 3), (1, 3))
    tmp41 = einsum(tmp3, (0, 1, 2), v.xov, (2, 0, 3), (1, 3))
    tmp40 = einsum(t2, (0, 1, 2, 3), tmp0, (4, 1, 5, 2), (0, 4, 5, 3))
    tmp39 = einsum(tmp0, (0, 1, 2, 3), t2, (1, 2, 4, 3), (0, 4))
    tmp38 = einsum(tmp0, (0, 1, 2, 3), t2, (1, 2, 3, 4), (0, 4))
    tmp37 = einsum(f.ov, (0, 1), t2, (2, 3, 4, 1), (0, 2, 3, 4))
    tmp32 = einsum(t2, (0, 1, 2, 3), tmp15, (1, 4, 5, 3), (0, 4, 2, 5))
    tmp31 = einsum(tmp15, (0, 1, 2, 3), t2, (4, 0, 3, 5), (4, 1, 5, 2))
    tmp30 = einsum(tmp3, (0, 1, 2), v.xoo, (2, 3, 4), (0, 3, 4, 1))
    tmp28 = einsum(v.xoo, (0, 1, 2), tmp6, (3, 4, 0), (3, 1, 2, 4))
    tmp27 = einsum(tmp0, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 2, 5))
    tmp25 = einsum(v.xoo, (0, 1, 2), v.xoo, (0, 3, 4), (1, 3, 4, 2))
    tmp24 = einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp23 = einsum(f.ov, (0, 1), t2, (2, 0, 1, 3), (2, 3))
    tmp18 = einsum(v.xvv, (0, 1, 2), v.xoo, (0, 3, 4), (3, 4, 1, 2))
    tmp16 = einsum(tmp15, (0, 1, 2, 3), t2, (4, 5, 2, 3), (4, 5, 0, 1))
    tmp13 = einsum(t2, (0, 1, 2, 3), tmp12, (4, 5, 3, 2), (0, 1, 4, 5))
    del tmp12
    tmp7 = einsum(v.xov, (0, 1, 2), tmp6, (3, 2, 0), (3, 1))
    tmp4 = einsum(v.xov, (0, 1, 2), tmp3, (3, 2, 0), (3, 1))

    return {f"tmp0": tmp0, f"tmp13": tmp13, f"tmp15": tmp15, f"tmp16": tmp16, f"tmp18": tmp18, f"tmp23": tmp23, f"tmp24": tmp24, f"tmp25": tmp25, f"tmp27": tmp27, f"tmp28": tmp28, f"tmp3": tmp3, f"tmp30": tmp30, f"tmp31": tmp31, f"tmp32": tmp32, f"tmp37": tmp37, f"tmp38": tmp38, f"tmp39": tmp39, f"tmp4": tmp4, f"tmp40": tmp40, f"tmp41": tmp41, f"tmp43": tmp43, f"tmp49": tmp49, f"tmp50": tmp50, f"tmp6": tmp6, f"tmp7": tmp7}

def hbar_matvec_ip(f=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:26:13.001256.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp8 = np.copy(r2) * -1
    tmp8 += np.transpose(r2, (1, 0, 2)) * 2
    tmp1 = np.copy(r2) * 2
    tmp1 += np.transpose(r2, (1, 0, 2)) * -1
    tmp4 = np.copy(ints.tmp18)
    tmp4 += ints.tmp31 * -1
    tmp9 = einsum(tmp8, (0, 1, 2), ints.tmp15, (1, 0, 2, 3), (3,)) * 0.5
    del tmp8, ints.tmp15
    tmp6 = np.copy(ints.tmp6) * 2
    del ints.tmp6
    tmp6 += np.transpose(v.xov, (1, 2, 0))
    tmp6 += ints.tmp3 * -1
    del ints.tmp3
    tmp5 = einsum(v.xov, (0, 1, 2), tmp1, (1, 3, 2), (3, 0)) * 0.5
    tmp11 = np.copy(f.ov)
    tmp11 += ints.tmp24 * 2
    del ints.tmp24
    tmp11 += ints.tmp38
    del ints.tmp38
    tmp11 += ints.tmp49 * 2
    del ints.tmp49
    tmp11 += ints.tmp23 * -1
    del ints.tmp23
    tmp11 += ints.tmp39 * -2
    del ints.tmp39
    tmp11 += ints.tmp50 * -1
    del ints.tmp50
    tmp2 = np.copy(f.oo)
    tmp2 += np.transpose(ints.tmp7, (1, 0)) * 2
    del ints.tmp7
    tmp2 += np.transpose(ints.tmp4, (1, 0)) * -1
    del ints.tmp4
    tmp3 = np.copy(ints.tmp18) * 0.5
    del ints.tmp18
    tmp3 += ints.tmp32
    tmp3 += ints.tmp31 * -0.5
    del ints.tmp31
    tmp10 = np.copy(ints.tmp0)
    tmp10 += np.transpose(ints.tmp13, (0, 2, 1, 3))
    del ints.tmp13
    tmp10 += np.transpose(ints.tmp28, (2, 1, 0, 3)) * 2
    del ints.tmp28
    tmp10 += np.transpose(ints.tmp37, (2, 0, 1, 3))
    del ints.tmp37
    tmp10 += np.transpose(ints.tmp27, (1, 2, 0, 3)) * -1
    del ints.tmp27
    tmp10 += np.transpose(ints.tmp30, (2, 1, 0, 3)) * -1
    del ints.tmp30
    tmp10 += np.transpose(ints.tmp40, (0, 2, 1, 3)) * -1
    del ints.tmp40
    tmp7 = np.copy(f.vv)
    tmp7 += np.transpose(ints.tmp41, (1, 0))
    del ints.tmp41
    tmp7 += np.transpose(ints.tmp43, (1, 0)) * -2
    del ints.tmp43
    tmp0 = np.copy(ints.tmp0) * -0.5
    tmp0 += np.transpose(ints.tmp0, (0, 2, 1, 3))
    del ints.tmp0
    r2new = einsum(ints.tmp32, (0, 1, 2, 3), r2, (4, 1, 3), (0, 4, 2))
    del ints.tmp32
    r2new += einsum(ints.tmp25, (0, 1, 2, 3), r2, (1, 3, 4), (2, 0, 4))
    del ints.tmp25
    r2new += einsum(ints.tmp16, (0, 1, 2, 3), r2, (3, 2, 4), (1, 0, 4))
    del ints.tmp16
    r2new += einsum(tmp3, (0, 1, 2, 3), r2, (1, 4, 3), (0, 4, 2)) * -2
    del tmp3
    r2new += einsum(tmp4, (0, 1, 2, 3), r2, (4, 1, 3), (4, 0, 2)) * -1
    del tmp4
    r2new += einsum(tmp6, (0, 1, 2), tmp5, (3, 2), (0, 3, 1)) * 2
    del tmp6, tmp5
    r2new += einsum(r2, (0, 1, 2), tmp7, (2, 3), (0, 1, 3))
    del tmp7
    r2new += einsum(tmp9, (0,), t2, (1, 2, 3, 0), (1, 2, 3)) * -2
    del tmp9
    r2new += einsum(tmp10, (0, 1, 2, 3), r1, (1,), (2, 0, 3))
    del tmp10
    r2new += einsum(r2, (0, 1, 2), tmp2, (0, 3), (3, 1, 2)) * -1
    r2new += einsum(r2, (0, 1, 2), tmp2, (1, 3), (0, 3, 2)) * -1
    r2new += einsum(r1, (0,), tmp11, (1, 2), (1, 0, 2)) * -1
    del tmp11
    r1new = einsum(tmp0, (0, 1, 2, 3), r2, (1, 2, 3), (0,)) * 2
    del tmp0
    r1new += einsum(tmp1, (0, 1, 2), f.ov, (0, 2), (1,)) * -1
    del tmp1
    r1new += einsum(r1, (0,), tmp2, (0, 1), (1,)) * -1
    del tmp2

    return {f"r1new": r1new, f"r2new": r2new}

def hbar_matvec_ea_intermediates(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:26:25.680461.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp0 : array
    tmp12 : array
    tmp15 : array
    tmp16 : array
    tmp18 : array
    tmp20 : array
    tmp28 : array
    tmp3 : array
    tmp30 : array
    tmp31 : array
    tmp32 : array
    tmp34 : array
    tmp36 : array
    tmp37 : array
    tmp38 : array
    tmp4 : array
    tmp40 : array
    tmp41 : array
    tmp44 : array
    tmp49 : array
    tmp50 : array
    tmp6 : array
    tmp7 : array
    """

    tmp19 = einsum(v.xoo, (0, 1, 2), v.xov, (0, 3, 4), (1, 2, 3, 4))
    tmp15 = einsum(v.xov, (0, 1, 2), v.xov, (0, 3, 4), (1, 3, 2, 4))
    tmp3 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 2), (0, 3, 4))
    tmp0 = einsum(v.xvv, (0, 1, 2), v.xov, (0, 3, 4), (3, 1, 2, 4))
    tmp6 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 3), (0, 2, 4))
    tmp50 = einsum(tmp19, (0, 1, 2, 3), t2, (1, 2, 4, 3), (0, 4))
    tmp49 = einsum(t2, (0, 1, 2, 3), tmp19, (4, 0, 1, 2), (4, 3))
    tmp44 = einsum(t2, (0, 1, 2, 3), tmp15, (1, 4, 5, 3), (0, 4, 2, 5))
    tmp41 = einsum(tmp3, (0, 1, 2), v.xvv, (2, 3, 4), (0, 1, 3, 4))
    tmp40 = einsum(tmp0, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 5, 3, 1))
    tmp38 = einsum(tmp6, (0, 1, 2), v.xvv, (2, 3, 4), (0, 1, 3, 4))
    tmp37 = einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp36 = einsum(f.ov, (0, 1), t2, (2, 0, 1, 3), (2, 3))
    tmp34 = einsum(v.xov, (0, 1, 2), tmp6, (3, 2, 0), (3, 1))
    tmp32 = einsum(v.xov, (0, 1, 2), tmp3, (3, 2, 0), (3, 1))
    tmp31 = einsum(v.xvv, (0, 1, 2), tmp3, (3, 2, 0), (3, 1))
    tmp30 = einsum(v.xvv, (0, 1, 2), tmp6, (3, 2, 0), (3, 1))
    tmp28 = einsum(v.xvv, (0, 1, 2), v.xvv, (0, 3, 4), (1, 3, 4, 2))
    tmp20 = einsum(tmp19, (0, 1, 2, 3), t2, (1, 2, 4, 5), (0, 4, 5, 3))
    del tmp19
    tmp18 = einsum(v.xvv, (0, 1, 2), v.xoo, (0, 3, 4), (3, 4, 1, 2))
    tmp16 = einsum(tmp15, (0, 1, 2, 3), t2, (4, 0, 3, 5), (4, 1, 5, 2))
    tmp12 = einsum(t2, (0, 1, 2, 3), tmp0, (1, 4, 2, 5), (0, 3, 5, 4))
    tmp7 = einsum(tmp6, (0, 1, 2), v.xov, (2, 0, 3), (1, 3))
    tmp4 = einsum(tmp3, (0, 1, 2), v.xov, (2, 0, 3), (1, 3))

    return {f"tmp0": tmp0, f"tmp12": tmp12, f"tmp15": tmp15, f"tmp16": tmp16, f"tmp18": tmp18, f"tmp20": tmp20, f"tmp28": tmp28, f"tmp3": tmp3, f"tmp30": tmp30, f"tmp31": tmp31, f"tmp32": tmp32, f"tmp34": tmp34, f"tmp36": tmp36, f"tmp37": tmp37, f"tmp38": tmp38, f"tmp4": tmp4, f"tmp40": tmp40, f"tmp41": tmp41, f"tmp44": tmp44, f"tmp49": tmp49, f"tmp50": tmp50, f"tmp6": tmp6, f"tmp7": tmp7}

def hbar_matvec_ea(f=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:26:25.703116.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp0 = np.copy(np.transpose(r2, (2, 0, 1))) * -0.5
    tmp0 += np.transpose(r2, (2, 1, 0))
    tmp1 = np.copy(np.transpose(r2, (2, 0, 1))) * -1
    tmp1 += np.transpose(r2, (2, 1, 0)) * 2
    tmp4 = np.copy(ints.tmp18) * 0.5
    tmp4 += ints.tmp44
    tmp4 += ints.tmp16 * -0.5
    tmp9 = einsum(r1, (0,), f.ov, (1, 0), (1,)) * 0.5
    tmp9 += einsum(ints.tmp15, (0, 1, 2, 3), tmp0, (0, 3, 2), (1,)) * -1
    tmp6 = einsum(tmp1, (0, 1, 2), v.xov, (3, 0, 2), (1, 3)) * 0.5
    tmp11 = np.copy(f.ov)
    tmp11 += ints.tmp30 * 2
    del ints.tmp30
    tmp11 += ints.tmp37 * 2
    del ints.tmp37
    tmp11 += ints.tmp49
    del ints.tmp49
    tmp11 += ints.tmp31 * -1
    del ints.tmp31
    tmp11 += ints.tmp36 * -1
    del ints.tmp36
    tmp11 += ints.tmp50 * -2
    del ints.tmp50
    tmp2 = np.copy(f.vv)
    tmp2 += np.transpose(ints.tmp4, (1, 0))
    del ints.tmp4
    tmp2 += np.transpose(ints.tmp7, (1, 0)) * -2
    del ints.tmp7
    tmp5 = np.copy(ints.tmp16)
    del ints.tmp16
    tmp5 += ints.tmp18 * -1
    del ints.tmp18
    tmp8 = np.copy(ints.tmp0)
    tmp8 += np.transpose(ints.tmp20, (0, 2, 3, 1))
    del ints.tmp20
    tmp8 += np.transpose(ints.tmp38, (0, 3, 2, 1)) * 2
    del ints.tmp38
    tmp8 += ints.tmp12 * -1
    del ints.tmp12
    tmp8 += np.transpose(ints.tmp40, (0, 3, 2, 1)) * -1
    del ints.tmp40
    tmp8 += np.transpose(ints.tmp41, (0, 3, 2, 1)) * -1
    del ints.tmp41
    tmp3 = einsum(r2, (0, 1, 2), ints.tmp15, (3, 4, 1, 0), (3, 4, 2))
    del ints.tmp15
    tmp10 = np.copy(f.oo)
    tmp10 += np.transpose(ints.tmp34, (1, 0)) * 2
    del ints.tmp34
    tmp10 += np.transpose(ints.tmp32, (1, 0)) * -1
    del ints.tmp32
    tmp7 = np.copy(ints.tmp6) * 2
    del ints.tmp6
    tmp7 += np.transpose(v.xov, (1, 2, 0))
    tmp7 += ints.tmp3 * -1
    del ints.tmp3
    r2new = einsum(r2, (0, 1, 2), ints.tmp28, (3, 0, 4, 1), (4, 3, 2))
    del ints.tmp28
    r2new += einsum(tmp3, (0, 1, 2), t2, (0, 1, 3, 4), (4, 3, 2))
    del tmp3
    r2new += einsum(r2, (0, 1, 2), ints.tmp44, (3, 2, 4, 1), (4, 0, 3))
    del ints.tmp44
    r2new += einsum(tmp4, (0, 1, 2, 3), r2, (3, 4, 1), (2, 4, 0)) * -2
    del tmp4
    r2new += einsum(r2, (0, 1, 2), tmp5, (3, 2, 4, 1), (0, 4, 3))
    del tmp5
    r2new += einsum(tmp7, (0, 1, 2), tmp6, (3, 2), (1, 3, 0)) * 2
    del tmp7, tmp6
    r2new += einsum(tmp8, (0, 1, 2, 3), r1, (2,), (3, 1, 0)) * -1
    del tmp8
    r2new += einsum(r2, (0, 1, 2), tmp2, (0, 3), (3, 1, 2))
    r2new += einsum(tmp2, (0, 1), r2, (2, 0, 3), (2, 1, 3))
    r2new += einsum(tmp9, (0,), t2, (1, 0, 2, 3), (2, 3, 1)) * 2
    del tmp9
    r2new += einsum(r2, (0, 1, 2), tmp10, (2, 3), (0, 1, 3)) * -1
    del tmp10
    r2new += einsum(r1, (0,), tmp11, (1, 2), (2, 0, 1)) * -1
    del tmp11
    r1new = einsum(ints.tmp0, (0, 1, 2, 3), tmp0, (0, 2, 3), (1,)) * -2
    del tmp0, ints.tmp0
    r1new += einsum(f.ov, (0, 1), tmp1, (0, 2, 1), (2,)) * -1
    del tmp1
    r1new += einsum(r1, (0,), tmp2, (0, 1), (1,))
    del tmp2

    return {f"r1new": r1new, f"r2new": r2new}

def hbar_lmatvec_ip_intermediates(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:26:45.012544.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp0 : array
    tmp1 : array
    tmp10 : array
    tmp12 : array
    tmp13 : array
    tmp15 : array
    tmp18 : array
    tmp21 : array
    tmp23 : array
    tmp25 : array
    tmp27 : array
    tmp29 : array
    tmp3 : array
    tmp32 : array
    tmp36 : array
    tmp41 : array
    tmp43 : array
    tmp44 : array
    tmp45 : array
    tmp59 : array
    tmp6 : array
    tmp63 : array
    tmp65 : array
    tmp67 : array
    tmp9 : array
    """

    tmp12 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 3), (0, 2, 4))
    tmp9 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 2), (0, 3, 4))
    tmp43 = einsum(v.xov, (0, 1, 2), v.xov, (0, 3, 4), (1, 3, 2, 4))
    tmp35 = einsum(v.xvv, (0, 1, 2), v.xov, (0, 3, 4), (3, 1, 2, 4))
    tmp6 = einsum(v.xoo, (0, 1, 2), v.xov, (0, 3, 4), (1, 2, 3, 4))
    tmp67 = einsum(tmp12, (0, 1, 2), v.xov, (2, 0, 3), (1, 3))
    tmp65 = einsum(tmp9, (0, 1, 2), v.xov, (2, 0, 3), (1, 3))
    tmp63 = einsum(tmp43, (0, 1, 2, 3), t2, (4, 5, 2, 3), (4, 5, 0, 1))
    tmp59 = einsum(v.xoo, (0, 1, 2), v.xoo, (0, 3, 4), (1, 3, 4, 2))
    tmp45 = einsum(t2, (0, 1, 2, 3), tmp43, (4, 1, 3, 5), (0, 4, 2, 5))
    tmp44 = einsum(t2, (0, 1, 2, 3), tmp43, (4, 1, 2, 5), (0, 4, 3, 5))
    tmp41 = einsum(v.xvv, (0, 1, 2), v.xoo, (0, 3, 4), (3, 4, 1, 2))
    tmp36 = einsum(t2, (0, 1, 2, 3), tmp35, (4, 5, 3, 2), (0, 1, 4, 5))
    del tmp35
    tmp32 = einsum(v.xvv, (0, 1, 2), tmp9, (3, 2, 0), (3, 1))
    tmp29 = einsum(v.xvv, (0, 1, 2), tmp12, (3, 2, 0), (3, 1))
    tmp27 = einsum(tmp12, (0, 1, 2), v.xoo, (2, 3, 4), (0, 3, 4, 1))
    tmp25 = einsum(v.xoo, (0, 1, 2), tmp9, (3, 4, 0), (3, 1, 2, 4))
    tmp23 = einsum(tmp6, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 2, 5))
    tmp21 = einsum(t2, (0, 1, 2, 3), tmp6, (4, 1, 5, 2), (0, 4, 5, 3))
    tmp18 = einsum(tmp6, (0, 1, 2, 3), t2, (1, 2, 4, 3), (0, 4))
    tmp15 = einsum(tmp6, (0, 1, 2, 3), t2, (1, 2, 3, 4), (0, 4))
    tmp13 = einsum(tmp12, (0, 1, 2), v.xov, (2, 3, 1), (0, 3))
    tmp10 = einsum(v.xov, (0, 1, 2), tmp9, (3, 2, 0), (3, 1))
    tmp3 = einsum(f.ov, (0, 1), t2, (2, 3, 4, 1), (0, 2, 3, 4))
    tmp1 = einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp0 = einsum(f.ov, (0, 1), t2, (2, 0, 1, 3), (2, 3))

    return {f"tmp0": tmp0, f"tmp1": tmp1, f"tmp10": tmp10, f"tmp12": tmp12, f"tmp13": tmp13, f"tmp15": tmp15, f"tmp18": tmp18, f"tmp21": tmp21, f"tmp23": tmp23, f"tmp25": tmp25, f"tmp27": tmp27, f"tmp29": tmp29, f"tmp3": tmp3, f"tmp32": tmp32, f"tmp36": tmp36, f"tmp41": tmp41, f"tmp43": tmp43, f"tmp44": tmp44, f"tmp45": tmp45, f"tmp59": tmp59, f"tmp6": tmp6, f"tmp63": tmp63, f"tmp65": tmp65, f"tmp67": tmp67, f"tmp9": tmp9}

def hbar_lmatvec_ip(f=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:26:45.037075.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp4 = np.copy(r2) * 2
    tmp4 += np.transpose(r2, (1, 0, 2)) * -1
    tmp8 = np.copy(ints.tmp12)
    del ints.tmp12
    tmp8 += np.transpose(v.xov, (1, 2, 0)) * 0.5
    tmp8 += ints.tmp9 * -0.5
    del ints.tmp9
    tmp11 = np.copy(np.transpose(t2, (0, 1, 3, 2)))
    tmp11 += t2 * -0.5
    tmp0 = np.copy(ints.tmp21)
    del ints.tmp21
    tmp0 += ints.tmp36 * -1
    del ints.tmp36
    tmp1 = np.copy(ints.tmp23) * 2
    del ints.tmp23
    tmp1 += ints.tmp25 * 2
    del ints.tmp25
    tmp1 += ints.tmp27 * -4
    del ints.tmp27
    tmp9 = einsum(tmp4, (0, 1, 2), tmp8, (0, 2, 3), (1, 3)) * 2
    del tmp8
    tmp6 = np.copy(ints.tmp41) * 0.5
    tmp6 += np.transpose(ints.tmp45, (1, 0, 3, 2))
    tmp6 += np.transpose(ints.tmp44, (1, 0, 3, 2)) * -0.5
    tmp12 = einsum(r2, (0, 1, 2), tmp11, (0, 1, 3, 2), (3,))
    del tmp11
    tmp5 = np.copy(f.oo)
    tmp5 += ints.tmp13 * 2
    del ints.tmp13
    tmp5 += ints.tmp10 * -1
    del ints.tmp10
    tmp10 = np.copy(f.vv)
    tmp10 += ints.tmp65
    del ints.tmp65
    tmp10 += ints.tmp67 * -2
    del ints.tmp67
    tmp7 = np.copy(ints.tmp41)
    del ints.tmp41
    tmp7 += np.transpose(ints.tmp44, (1, 0, 3, 2)) * -1
    del ints.tmp44
    tmp2 = np.copy(tmp0)
    tmp2 += np.transpose(tmp0, (1, 0, 2, 3)) * -2
    del tmp0
    tmp2 += tmp1 * -1
    tmp2 += np.transpose(tmp1, (1, 0, 2, 3)) * 0.5
    del tmp1
    tmp2 += np.transpose(ints.tmp3, (1, 2, 0, 3)) * 2
    tmp2 += np.transpose(ints.tmp3, (2, 1, 0, 3)) * -1
    del ints.tmp3
    tmp2 += np.transpose(ints.tmp6, (1, 2, 0, 3)) * -1
    tmp2 += np.transpose(ints.tmp6, (2, 1, 0, 3)) * 2
    tmp3 = np.copy(f.ov)
    tmp3 += ints.tmp15
    del ints.tmp15
    tmp3 += ints.tmp1 * 2
    del ints.tmp1
    tmp3 += ints.tmp29 * 2
    del ints.tmp29
    tmp3 += ints.tmp0 * -1
    del ints.tmp0
    tmp3 += ints.tmp18 * -2
    del ints.tmp18
    tmp3 += ints.tmp32 * -1
    del ints.tmp32
    r2new = einsum(f.ov, (0, 1), r1, (2,), (0, 2, 1)) * -1
    r2new += einsum(ints.tmp45, (0, 1, 2, 3), r2, (4, 0, 2), (1, 4, 3))
    del ints.tmp45
    r2new += einsum(r2, (0, 1, 2), ints.tmp59, (3, 0, 4, 1), (4, 3, 2))
    del ints.tmp59
    r2new += einsum(ints.tmp63, (0, 1, 2, 3), r2, (1, 0, 4), (3, 2, 4))
    del ints.tmp63
    r2new += einsum(r1, (0,), ints.tmp6, (1, 0, 2, 3), (2, 1, 3))
    del ints.tmp6
    r2new += einsum(r2, (0, 1, 2), tmp6, (3, 0, 4, 2), (3, 1, 4)) * -2
    del tmp6
    r2new += einsum(tmp7, (0, 1, 2, 3), r2, (4, 1, 3), (4, 0, 2)) * -1
    del tmp7
    r2new += einsum(v.xov, (0, 1, 2), tmp9, (3, 0), (1, 3, 2))
    del tmp9
    r2new += einsum(tmp10, (0, 1), r2, (2, 3, 0), (2, 3, 1))
    del tmp10
    r2new += einsum(ints.tmp43, (0, 1, 2, 3), tmp12, (3,), (0, 1, 2)) * -2
    del ints.tmp43, tmp12
    r2new += einsum(tmp5, (0, 1), r2, (0, 2, 3), (1, 2, 3)) * -1
    r2new += einsum(r2, (0, 1, 2), tmp5, (1, 3), (0, 3, 2)) * -1
    r1new = einsum(tmp2, (0, 1, 2, 3), r2, (0, 1, 3), (2,))
    del tmp2
    r1new += einsum(tmp3, (0, 1), tmp4, (0, 2, 1), (2,)) * -1
    del tmp4, tmp3
    r1new += einsum(tmp5, (0, 1), r1, (0,), (1,)) * -1
    del tmp5

    return {f"r1new": r1new, f"r2new": r2new}

def hbar_lmatvec_ea_intermediates(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:27:04.527857.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    tmp0 : array
    tmp1 : array
    tmp10 : array
    tmp11 : array
    tmp13 : array
    tmp14 : array
    tmp17 : array
    tmp20 : array
    tmp23 : array
    tmp26 : array
    tmp29 : array
    tmp32 : array
    tmp34 : array
    tmp37 : array
    tmp39 : array
    tmp43 : array
    tmp45 : array
    tmp47 : array
    tmp49 : array
    tmp50 : array
    tmp51 : array
    tmp61 : array
    tmp7 : array
    """

    tmp49 = einsum(v.xov, (0, 1, 2), v.xov, (0, 3, 4), (1, 3, 2, 4))
    tmp13 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 3), (0, 2, 4))
    tmp10 = einsum(t2, (0, 1, 2, 3), v.xov, (4, 1, 2), (0, 3, 4))
    tmp7 = einsum(v.xvv, (0, 1, 2), v.xov, (0, 3, 4), (3, 1, 2, 4))
    tmp16 = einsum(v.xoo, (0, 1, 2), v.xov, (0, 3, 4), (1, 2, 3, 4))
    tmp61 = einsum(v.xvv, (0, 1, 2), v.xvv, (0, 3, 4), (1, 3, 4, 2))
    tmp51 = einsum(t2, (0, 1, 2, 3), tmp49, (4, 1, 3, 5), (0, 4, 2, 5))
    tmp50 = einsum(t2, (0, 1, 2, 3), tmp49, (4, 1, 2, 5), (0, 4, 3, 5))
    tmp47 = einsum(v.xov, (0, 1, 2), tmp13, (3, 2, 0), (3, 1))
    tmp45 = einsum(v.xov, (0, 1, 2), tmp10, (3, 2, 0), (3, 1))
    tmp43 = einsum(v.xvv, (0, 1, 2), v.xoo, (0, 3, 4), (3, 4, 1, 2))
    tmp39 = einsum(tmp7, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 5, 3, 1))
    tmp37 = einsum(t2, (0, 1, 2, 3), tmp7, (1, 4, 2, 5), (0, 3, 5, 4))
    tmp34 = einsum(v.xvv, (0, 1, 2), tmp13, (3, 4, 0), (3, 4, 1, 2))
    tmp32 = einsum(tmp10, (0, 1, 2), v.xvv, (2, 3, 4), (0, 1, 3, 4))
    tmp29 = einsum(v.xvv, (0, 1, 2), tmp10, (3, 2, 0), (3, 1))
    tmp26 = einsum(v.xvv, (0, 1, 2), tmp13, (3, 2, 0), (3, 1))
    tmp23 = einsum(tmp16, (0, 1, 2, 3), t2, (0, 2, 4, 5), (1, 4, 5, 3))
    tmp20 = einsum(tmp16, (0, 1, 2, 3), t2, (0, 2, 4, 3), (1, 4))
    tmp17 = einsum(tmp16, (0, 1, 2, 3), t2, (0, 2, 3, 4), (1, 4))
    del tmp16
    tmp14 = einsum(v.xov, (0, 1, 2), tmp13, (1, 3, 0), (3, 2))
    tmp11 = einsum(tmp10, (0, 1, 2), v.xov, (2, 0, 3), (1, 3))
    tmp1 = einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp0 = einsum(f.ov, (0, 1), t2, (2, 0, 1, 3), (2, 3))

    return {f"tmp0": tmp0, f"tmp1": tmp1, f"tmp10": tmp10, f"tmp11": tmp11, f"tmp13": tmp13, f"tmp14": tmp14, f"tmp17": tmp17, f"tmp20": tmp20, f"tmp23": tmp23, f"tmp26": tmp26, f"tmp29": tmp29, f"tmp32": tmp32, f"tmp34": tmp34, f"tmp37": tmp37, f"tmp39": tmp39, f"tmp43": tmp43, f"tmp45": tmp45, f"tmp47": tmp47, f"tmp49": tmp49, f"tmp50": tmp50, f"tmp51": tmp51, f"tmp61": tmp61, f"tmp7": tmp7}

def hbar_lmatvec_ea(f=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T12:27:04.551206.

    Parameters
    ----------
    f : array
        Fock matrix.
    r1 : array
        R1 amplitudes.
    r2 : array
        R2 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    r1new : array
        Updated R1 residuals.
    r2new : array
        Updated R2 residuals.
    """

    ints = kwargs["ints"]
    tmp10 = np.copy(np.transpose(r2, (2, 0, 1))) * -0.5
    tmp10 += np.transpose(r2, (2, 1, 0))
    tmp11 = np.copy(ints.tmp13) * 2
    del ints.tmp13
    tmp11 += np.transpose(v.xov, (1, 2, 0))
    tmp11 += ints.tmp10 * -1
    del ints.tmp10
    tmp5 = np.copy(np.transpose(t2, (0, 1, 3, 2)))
    tmp5 += t2 * -0.5
    tmp4 = np.copy(f.vv)
    tmp4 += ints.tmp11
    del ints.tmp11
    tmp4 += ints.tmp14 * -2
    del ints.tmp14
    tmp9 = np.copy(ints.tmp43)
    tmp9 += np.transpose(ints.tmp50, (1, 0, 3, 2)) * -1
    tmp13 = np.copy(f.oo)
    tmp13 += ints.tmp47 * 2
    del ints.tmp47
    tmp13 += ints.tmp45 * -1
    del ints.tmp45
    tmp12 = einsum(tmp10, (0, 1, 2), tmp11, (0, 2, 3), (1, 3)) * 2
    del tmp10, tmp11
    tmp14 = einsum(r2, (0, 1, 2), tmp5, (2, 3, 1, 0), (3,))
    tmp8 = np.copy(ints.tmp43) * 0.5
    del ints.tmp43
    tmp8 += np.transpose(ints.tmp51, (1, 0, 3, 2))
    tmp8 += np.transpose(ints.tmp50, (1, 0, 3, 2)) * -0.5
    del ints.tmp50
    tmp7 = einsum(r2, (0, 1, 2), t2, (3, 4, 0, 1), (2, 3, 4))
    tmp6 = einsum(r2, (0, 1, 2), tmp5, (2, 3, 1, 0), (3,)) * 2
    del tmp5
    tmp1 = np.copy(ints.tmp23) * 2
    tmp1 += ints.tmp34 * 4
    tmp1 += np.transpose(ints.tmp37, (0, 1, 3, 2))
    tmp1 += ints.tmp32 * -2
    tmp1 += np.transpose(ints.tmp39, (0, 1, 3, 2)) * -2
    tmp1 += np.transpose(ints.tmp7, (0, 2, 3, 1)) * -1
    tmp0 = np.copy(ints.tmp23) * 0.5
    del ints.tmp23
    tmp0 += ints.tmp34
    del ints.tmp34
    tmp0 += np.transpose(ints.tmp37, (0, 1, 3, 2))
    del ints.tmp37
    tmp0 += ints.tmp32 * -0.5
    del ints.tmp32
    tmp0 += np.transpose(ints.tmp39, (0, 1, 3, 2)) * -0.5
    del ints.tmp39
    tmp0 += np.transpose(ints.tmp7, (0, 2, 3, 1)) * -1
    tmp2 = np.copy(f.ov)
    tmp2 += ints.tmp17
    del ints.tmp17
    tmp2 += ints.tmp1 * 2
    del ints.tmp1
    tmp2 += ints.tmp26 * 2
    del ints.tmp26
    tmp2 += ints.tmp0 * -1
    del ints.tmp0
    tmp2 += ints.tmp20 * -2
    del ints.tmp20
    tmp2 += ints.tmp29 * -1
    del ints.tmp29
    tmp3 = np.copy(np.transpose(r2, (2, 0, 1))) * -1
    tmp3 += np.transpose(r2, (2, 1, 0)) * 2
    r2new = einsum(r2, (0, 1, 2), ints.tmp61, (3, 0, 4, 1), (4, 3, 2))
    del ints.tmp61
    r2new += einsum(r1, (0,), f.ov, (1, 2), (2, 0, 1)) * -1
    r2new += einsum(ints.tmp7, (0, 1, 2, 3), r1, (2,), (3, 1, 0)) * -1
    del ints.tmp7
    r2new += einsum(tmp7, (0, 1, 2), ints.tmp49, (2, 1, 3, 4), (4, 3, 0))
    del tmp7
    r2new += einsum(r2, (0, 1, 2), ints.tmp51, (2, 3, 1, 4), (4, 0, 3))
    del ints.tmp51
    r2new += einsum(tmp8, (0, 1, 2, 3), r2, (3, 4, 1), (2, 4, 0)) * -2
    del tmp8
    r2new += einsum(r2, (0, 1, 2), tmp9, (3, 2, 4, 1), (0, 4, 3)) * -1
    del tmp9
    r2new += einsum(v.xov, (0, 1, 2), tmp12, (3, 0), (2, 3, 1))
    del tmp12
    r2new += einsum(tmp4, (0, 1), r2, (0, 2, 3), (1, 2, 3))
    r2new += einsum(r2, (0, 1, 2), tmp4, (1, 3), (0, 3, 2))
    r2new += einsum(r2, (0, 1, 2), tmp13, (2, 3), (0, 1, 3)) * -1
    del tmp13
    r2new += einsum(tmp14, (0,), ints.tmp49, (1, 0, 2, 3), (2, 3, 1)) * -2
    del ints.tmp49, tmp14
    r1new = einsum(tmp0, (0, 1, 2, 3), r2, (2, 1, 0), (3,)) * 2
    del tmp0
    r1new += einsum(r2, (0, 1, 2), tmp1, (2, 0, 1, 3), (3,)) * -1
    del tmp1
    r1new += einsum(tmp2, (0, 1), tmp3, (0, 2, 1), (2,)) * -1
    del tmp2, tmp3
    r1new += einsum(r1, (0,), tmp4, (0, 1), (1,))
    del tmp4
    r1new += einsum(tmp6, (0,), f.ov, (0, 1), (1,))
    del tmp6

    return {f"r1new": r1new, f"r2new": r2new}


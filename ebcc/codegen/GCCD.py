"""Code generated by `albert` version 0.0.0.

 * date: 2024-12-19T15:11:05.037812
 * python version: 3.10.15 (main, Sep  9 2024, 03:03:06) [GCC 13.2.0]
 * albert version: 0.0.0
 * caller: /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/albert/code/einsum.py
 * node: fv-az1676-657
 * system: Linux
 * processor: x86_64
 * release: 6.8.0-1017-azure
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, dirsum, Namespace


def energy(t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        t2: 
        v: 

    Returns:
        e_cc: 
    """

    e_cc = einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 2, 3), ()) * 0.25

    return e_cc

def update_amps(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        t2new: 
    """

    t2new = np.copy(v.oovv)
    t2new += einsum(v.vvvv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (4, 5, 0, 1)) * 0.5
    tmp0 = einsum(t2, (0, 1, 2, 3), f.oo, (4, 1), (4, 0, 2, 3))
    t2new += np.transpose(tmp0, (0, 1, 3, 2)) * -1
    t2new += np.transpose(tmp0, (1, 0, 3, 2))
    del tmp0
    tmp1 = einsum(t2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2))
    t2new += np.transpose(tmp1, (1, 0, 2, 3))
    t2new += np.transpose(tmp1, (1, 0, 3, 2)) * -1
    del tmp1
    tmp2 = einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 3), (4, 2))
    tmp3 = einsum(t2, (0, 1, 2, 3), tmp2, (4, 3), (0, 1, 2, 4))
    del tmp2
    tmp6 = np.copy(tmp3) * -0.5
    del tmp3
    tmp4 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    tmp5 = einsum(t2, (0, 1, 2, 3), tmp4, (4, 1, 5, 3), (4, 0, 5, 2))
    del tmp4
    tmp6 += tmp5
    del tmp5
    t2new += tmp6
    t2new += np.transpose(tmp6, (0, 1, 3, 2)) * -1
    del tmp6
    tmp7 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 1, 2, 3), (4, 0))
    tmp8 = einsum(tmp7, (0, 1), t2, (2, 1, 3, 4), (2, 0, 3, 4))
    del tmp7
    t2new += np.transpose(tmp8, (0, 1, 3, 2)) * 0.5
    t2new += np.transpose(tmp8, (1, 0, 3, 2)) * -0.5
    del tmp8
    tmp9 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 5, 1), (4, 0, 5, 3))
    t2new += tmp9 * -1
    t2new += np.transpose(tmp9, (0, 1, 3, 2))
    t2new += np.transpose(tmp9, (1, 0, 2, 3))
    t2new += np.transpose(tmp9, (1, 0, 3, 2)) * -1
    del tmp9
    tmp10 = np.copy(v.oooo)
    tmp10 += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (0, 1, 4, 5)) * 0.5
    t2new += einsum(t2, (0, 1, 2, 3), tmp10, (0, 1, 4, 5), (4, 5, 2, 3)) * 0.5
    del tmp10

    return {"t2new": t2new}

def update_lams(f=None, l2=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        l2: 
        t2: 
        v: 

    Returns:
        l2new: 
    """

    l2new = np.copy(np.transpose(v.oovv, (2, 3, 0, 1)))
    tmp0 = einsum(t2, (0, 1, 2, 3), l2, (2, 3, 4, 5), (4, 5, 0, 1))
    l2new += einsum(v.oovv, (0, 1, 2, 3), tmp0, (4, 5, 1, 0), (2, 3, 4, 5)) * -0.25
    del tmp0
    l2new += einsum(l2, (0, 1, 2, 3), v.vvvv, (4, 5, 0, 1), (4, 5, 2, 3)) * 0.5
    tmp1 = einsum(l2, (0, 1, 2, 3), f.oo, (4, 3), (4, 2, 0, 1))
    l2new += np.transpose(tmp1, (3, 2, 0, 1)) * -1
    l2new += np.transpose(tmp1, (3, 2, 1, 0))
    del tmp1
    tmp2 = einsum(l2, (0, 1, 2, 3), f.vv, (4, 1), (2, 3, 4, 0))
    l2new += np.transpose(tmp2, (2, 3, 1, 0))
    l2new += np.transpose(tmp2, (3, 2, 1, 0)) * -1
    del tmp2
    tmp4 = np.copy(np.transpose(v.ovov, (0, 2, 3, 1))) * -1
    tmp3 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    tmp4 += tmp3
    del tmp3
    tmp5 = einsum(tmp4, (0, 1, 2, 3), l2, (4, 2, 5, 0), (5, 1, 4, 3))
    del tmp4
    l2new += np.transpose(tmp5, (2, 3, 0, 1))
    l2new += np.transpose(tmp5, (3, 2, 0, 1)) * -1
    l2new += np.transpose(tmp5, (2, 3, 1, 0)) * -1
    l2new += np.transpose(tmp5, (3, 2, 1, 0))
    del tmp5
    tmp6 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 2, 3), (0, 4))
    tmp7 = einsum(l2, (0, 1, 2, 3), tmp6, (3, 4), (2, 4, 0, 1))
    del tmp6
    tmp10 = np.copy(np.transpose(tmp7, (0, 1, 3, 2))) * -0.5
    del tmp7
    tmp8 = einsum(l2, (0, 1, 2, 3), t2, (4, 3, 0, 1), (2, 4))
    tmp9 = einsum(tmp8, (0, 1), v.oovv, (2, 1, 3, 4), (0, 2, 3, 4)) * -1
    del tmp8
    tmp10 += np.transpose(tmp9, (0, 1, 3, 2)) * -0.5
    del tmp9
    l2new += np.transpose(tmp10, (3, 2, 0, 1))
    l2new += np.transpose(tmp10, (3, 2, 1, 0)) * -1
    del tmp10
    tmp11 = einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 4, 3), (2, 4))
    tmp12 = einsum(tmp11, (0, 1), l2, (2, 0, 3, 4), (3, 4, 2, 1))
    del tmp11
    tmp15 = np.copy(tmp12) * 0.5
    del tmp12
    tmp13 = einsum(l2, (0, 1, 2, 3), t2, (2, 3, 4, 1), (0, 4))
    tmp14 = einsum(tmp13, (0, 1), v.oovv, (2, 3, 4, 1), (2, 3, 0, 4)) * -1
    del tmp13
    tmp15 += tmp14 * 0.5
    del tmp14
    l2new += np.transpose(tmp15, (2, 3, 1, 0))
    l2new += np.transpose(tmp15, (3, 2, 1, 0)) * -1
    del tmp15
    tmp16 = np.copy(v.oooo) * 2
    tmp16 += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 5, 2, 3), (0, 1, 4, 5))
    l2new += einsum(l2, (0, 1, 2, 3), tmp16, (2, 3, 4, 5), (0, 1, 4, 5)) * 0.25
    del tmp16

    return {"l2new": l2new}

def make_rdm1_f(l2=None, t2=None, δ=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        l2: 
        t2: 
        δ: 

    Returns:
        rdm1: 
    """

    δ = Namespace()
    δ.oo = np.eye(t2.shape[0])
    δ.vv = np.eye(t2.shape[-1])

    rdm1 = Namespace()
    rdm1.oo = einsum(t2, (0, 1, 2, 3), l2, (2, 3, 4, 1), (0, 4)) * -0.5
    rdm1.oo += δ.oo
    rdm1.vv = einsum(l2, (0, 1, 2, 3), t2, (2, 3, 4, 1), (0, 4)) * 0.5

    rdm1.ov = np.zeros((t2.shape[0], t2.shape[-1]))
    rdm1.vo = np.zeros((t2.shape[-1], t2.shape[0]))
    rdm1 = np.block([[rdm1.oo, rdm1.ov], [rdm1.vo, rdm1.vv]])

    return rdm1

def make_rdm2_f(l2=None, t2=None, δ=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        l2: 
        t2: 
        δ: 

    Returns:
        rdm2: 
    """

    δ = Namespace()
    δ.oo = np.eye(t2.shape[0])
    δ.vv = np.eye(t2.shape[-1])

    rdm2 = Namespace()
    rdm2.vvoo = np.copy(l2)
    rdm2.vvvv = einsum(l2, (0, 1, 2, 3), t2, (2, 3, 4, 5), (0, 1, 4, 5)) * 0.5
    tmp0 = einsum(t2, (0, 1, 2, 3), l2, (2, 3, 4, 5), (4, 5, 0, 1))
    rdm2.oooo = np.copy(np.transpose(tmp0, (3, 2, 1, 0))) * 0.5
    rdm2.oooo += einsum(δ.oo, (0, 1), δ.oo, (2, 3), (2, 0, 3, 1))
    rdm2.oooo += einsum(δ.oo, (0, 1), δ.oo, (2, 3), (2, 0, 1, 3)) * -1
    tmp1 = einsum(l2, (0, 1, 2, 3), t2, (4, 3, 0, 1), (2, 4))
    rdm2.oooo += einsum(δ.oo, (0, 1), tmp1, (2, 3), (3, 0, 2, 1)) * -0.5
    rdm2.oooo += einsum(δ.oo, (0, 1), tmp1, (2, 3), (0, 3, 2, 1)) * 0.5
    rdm2.oooo += einsum(δ.oo, (0, 1), tmp1, (2, 3), (3, 0, 1, 2)) * 0.5
    rdm2.oooo += einsum(δ.oo, (0, 1), tmp1, (2, 3), (0, 3, 1, 2)) * -0.5
    tmp4 = einsum(l2, (0, 1, 2, 3), t2, (4, 3, 5, 1), (2, 4, 0, 5))
    rdm2.ovov = np.copy(np.transpose(tmp4, (1, 2, 0, 3))) * -1
    tmp2 = einsum(t2, (0, 1, 2, 3), l2, (4, 3, 0, 1), (4, 2))
    rdm2.ovov += einsum(tmp2, (0, 1), δ.oo, (2, 3), (2, 0, 3, 1)) * 0.5
    rdm2.ovvo = np.copy(np.transpose(tmp4, (1, 2, 3, 0)))
    rdm2.ovvo += einsum(tmp2, (0, 1), δ.oo, (2, 3), (2, 0, 1, 3)) * -0.5
    rdm2.voov = np.copy(np.transpose(tmp4, (2, 1, 0, 3)))
    rdm2.voov += einsum(tmp2, (0, 1), δ.oo, (2, 3), (0, 2, 3, 1)) * -0.5
    rdm2.vovo = np.copy(np.transpose(tmp4, (2, 1, 3, 0))) * -1
    rdm2.vovo += einsum(tmp2, (0, 1), δ.oo, (2, 3), (0, 2, 1, 3)) * 0.5
    rdm2.oovv = einsum(t2, (0, 1, 2, 3), tmp0, (1, 0, 4, 5), (5, 4, 2, 3)) * 0.25
    del tmp0
    rdm2.oovv += t2
    tmp3 = einsum(t2, (0, 1, 2, 3), tmp2, (3, 4), (0, 1, 2, 4))
    del tmp2
    tmp6 = np.copy(tmp3) * -0.5
    del tmp3
    tmp5 = einsum(t2, (0, 1, 2, 3), tmp4, (1, 4, 3, 5), (4, 0, 5, 2))
    del tmp4
    tmp6 += tmp5
    del tmp5
    rdm2.oovv += tmp6
    rdm2.oovv += np.transpose(tmp6, (0, 1, 3, 2)) * -1
    del tmp6
    tmp7 = einsum(t2, (0, 1, 2, 3), tmp1, (1, 4), (0, 4, 2, 3))
    del tmp1
    rdm2.oovv += np.transpose(tmp7, (0, 1, 3, 2)) * 0.5
    rdm2.oovv += np.transpose(tmp7, (1, 0, 3, 2)) * -0.5
    del tmp7

    rdm2.ooov = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[-1]))
    rdm2.oovo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[-1], t2.shape[0]))
    rdm2.ovoo = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[0], t2.shape[0]))
    rdm2.ovvv = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[-1], t2.shape[-1]))
    rdm2.vooo = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.vovv = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[-1], t2.shape[-1]))
    rdm2.vvov = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[0], t2.shape[-1]))
    rdm2.vvvo = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[-1], t2.shape[0]))
    rdm2 = pack_2e(rdm2.oooo, rdm2.ooov, rdm2.oovo, rdm2.ovoo, rdm2.vooo, rdm2.oovv, rdm2.ovov, rdm2.ovvo, rdm2.voov, rdm2.vovo, rdm2.vvoo, rdm2.ovvv, rdm2.vovv, rdm2.vvov, rdm2.vvvo, rdm2.vvvv).transpose((0, 2, 1, 3))

    return rdm2

def hbar_matvec_ip_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp0: 
        tmp1: 
        tmp11: 
        tmp13: 
        tmp16: 
        tmp17: 
        tmp18: 
        tmp9: 
    """

    tmp1 = np.copy(np.transpose(f.oo, (1, 0)))
    tmp0 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 2, 3), (4, 1)) * -1
    tmp1 += np.transpose(tmp0, (1, 0)) * 0.5
    tmp11 = einsum(v.ooov, (0, 1, 2, 3), t2, (4, 0, 5, 3), (4, 1, 2, 5)) * -1
    tmp13 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 1, 5, 3))
    tmp16 = np.copy(np.transpose(v.oooo, (2, 3, 1, 0))) * -2
    tmp16 += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (1, 0, 5, 4))
    tmp17 = np.copy(np.transpose(f.vv, (1, 0)))
    tmp17 += einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 2), (3, 4)) * 0.5
    tmp6 = einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp9 = np.copy(tmp6) * -1
    del tmp6
    tmp7 = einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 4, 3), (2, 4))
    tmp9 += tmp7 * 0.5
    del tmp7
    tmp8 = einsum(v.ovvv, (0, 1, 2, 3), t2, (4, 0, 2, 3), (4, 1))
    tmp9 += tmp8 * 0.5
    del tmp8
    tmp18 = np.copy(np.transpose(v.ooov, (1, 0, 2, 3))) * -1
    tmp18 += einsum(f.ov, (0, 1), t2, (2, 3, 4, 1), (3, 2, 0, 4))
    tmp18 += einsum(v.ovvv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (5, 4, 0, 1)) * -0.5

    return {"tmp0": tmp0, "tmp1": tmp1, "tmp11": tmp11, "tmp13": tmp13, "tmp16": tmp16, "tmp17": tmp17, "tmp18": tmp18, "tmp9": tmp9}

def hbar_matvec_ip(f=None, ints=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        t2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(r1, (0,), ints.tmp1, (0, 1), (1,)) * -1
    r1new += einsum(r2, (0, 1, 2), f.ov, (1, 2), (0,))
    r1new += einsum(r2, (0, 1, 2), v.ooov, (0, 1, 3, 2), (3,)) * -0.5
    r2new = einsum(ints.tmp18, (0, 1, 2, 3), r1, (2,), (1, 0, 3))
    r2new += einsum(ints.tmp17, (0, 1), r2, (2, 3, 0), (3, 2, 1)) * -1
    r2new += einsum(r2, (0, 1, 2), ints.tmp16, (1, 0, 3, 4), (3, 4, 2)) * -0.25
    tmp0 = einsum(v.oovv, (0, 1, 2, 3), r2, (0, 1, 2), (3,)) * -1
    r2new += einsum(tmp0, (0,), t2, (1, 2, 3, 0), (1, 2, 3)) * 0.5
    del tmp0
    tmp1 = einsum(ints.tmp0, (0, 1), r2, (2, 1, 3), (0, 2, 3))
    tmp5 = np.copy(tmp1) * -0.5
    del tmp1
    tmp2 = einsum(ints.tmp13, (0, 1, 2, 3), r2, (4, 1, 3), (0, 4, 2))
    tmp5 += tmp2
    del tmp2
    tmp3 = einsum(v.ovov, (0, 1, 2, 3), r2, (4, 2, 1), (4, 0, 3))
    tmp5 += tmp3
    del tmp3
    tmp4 = np.copy(f.ov)
    tmp4 += ints.tmp9 * -1
    tmp5 += einsum(r1, (0,), tmp4, (1, 2), (1, 0, 2))
    del tmp4
    r2new += tmp5 * -1
    r2new += np.transpose(tmp5, (1, 0, 2))
    del tmp5
    tmp6 = einsum(r2, (0, 1, 2), f.oo, (3, 1), (3, 0, 2))
    tmp8 = np.copy(tmp6)
    del tmp6
    tmp7 = einsum(ints.tmp11, (0, 1, 2, 3), r1, (1,), (0, 2, 3))
    tmp8 += tmp7
    del tmp7
    r2new += tmp8
    r2new += np.transpose(tmp8, (1, 0, 2)) * -1
    del tmp8

    return {"r1new": r1new, "r2new": r2new}

def hbar_matvec_ea_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp0: 
        tmp1: 
        tmp10: 
        tmp13: 
        tmp14: 
        tmp15: 
        tmp18: 
        tmp4: 
        tmp7: 
    """

    tmp1 = np.copy(np.transpose(f.vv, (1, 0)))
    tmp0 = einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 2), (4, 3)) * -1
    tmp1 += np.transpose(tmp0, (1, 0)) * -0.5
    tmp4 = einsum(t2, (0, 1, 2, 3), v.ovvv, (1, 4, 3, 5), (0, 2, 4, 5)) * -1
    tmp7 = einsum(v.ovvv, (0, 1, 2, 3), t2, (4, 0, 2, 3), (4, 1))
    tmp13 = np.copy(np.transpose(v.vvvv, (2, 3, 1, 0))) * -1
    tmp13 += einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 5), (3, 2, 5, 4)) * 0.5
    tmp14 = np.copy(np.transpose(v.ovvv, (0, 1, 3, 2))) * -1
    tmp14 += einsum(f.ov, (0, 1), t2, (2, 0, 3, 4), (2, 1, 4, 3))
    tmp14 += einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 4, 5), (2, 3, 5, 4)) * -0.5
    tmp15 = np.copy(np.transpose(f.oo, (1, 0)))
    tmp15 += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 2, 3), (1, 4)) * -0.5
    tmp10 = np.copy(np.transpose(v.ovov, (2, 0, 1, 3))) * -1
    tmp9 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 1, 5, 3))
    tmp10 += tmp9
    del tmp9
    tmp18 = np.copy(f.ov)
    tmp16 = einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp18 += tmp16
    del tmp16
    tmp17 = einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 4, 3), (2, 4))
    tmp18 += tmp17 * -0.5
    del tmp17

    return {"tmp0": tmp0, "tmp1": tmp1, "tmp10": tmp10, "tmp13": tmp13, "tmp14": tmp14, "tmp15": tmp15, "tmp18": tmp18, "tmp4": tmp4, "tmp7": tmp7}

def hbar_matvec_ea(f=None, ints=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        t2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(r2, (0, 1, 2), v.ovvv, (2, 3, 0, 1), (3,)) * -0.5
    r1new += einsum(ints.tmp1, (0, 1), r1, (0,), (1,))
    r1new += einsum(r2, (0, 1, 2), f.ov, (2, 1), (0,))
    r2new = einsum(r2, (0, 1, 2), ints.tmp15, (2, 3), (1, 0, 3))
    r2new += einsum(ints.tmp14, (0, 1, 2, 3), r1, (1,), (3, 2, 0))
    tmp0 = einsum(r2, (0, 1, 2), v.oovv, (2, 3, 0, 1), (3,)) * -1
    r2new += einsum(tmp0, (0,), t2, (1, 0, 2, 3), (3, 2, 1)) * -0.5
    del tmp0
    r2new += einsum(r2, (0, 1, 2), ints.tmp13, (0, 1, 3, 4), (3, 4, 2)) * 0.5
    tmp1 = np.copy(np.transpose(f.vv, (1, 0))) * 2
    tmp1 += np.transpose(ints.tmp0, (1, 0)) * -1
    tmp2 = einsum(r2, (0, 1, 2), tmp1, (0, 3), (2, 1, 3)) * 0.5
    del tmp1
    tmp4 = np.copy(np.transpose(tmp2, (0, 2, 1))) * -1
    del tmp2
    tmp3 = np.copy(ints.tmp18) * 2
    tmp3 += ints.tmp7 * -1
    tmp4 += einsum(r1, (0,), tmp3, (1, 2), (1, 2, 0)) * 0.5
    del tmp3
    r2new += np.transpose(tmp4, (1, 2, 0)) * -1
    r2new += np.transpose(tmp4, (2, 1, 0))
    del tmp4
    tmp5 = einsum(r1, (0,), ints.tmp4, (1, 2, 3, 0), (1, 2, 3))
    tmp7 = np.copy(tmp5)
    del tmp5
    tmp6 = einsum(r2, (0, 1, 2), ints.tmp10, (3, 2, 4, 1), (3, 4, 0))
    tmp7 += tmp6 * -1
    del tmp6
    r2new += np.transpose(tmp7, (1, 2, 0))
    r2new += np.transpose(tmp7, (2, 1, 0)) * -1
    del tmp7

    return {"r1new": r1new, "r2new": r2new}

def hbar_matvec_ee_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp1: 
        tmp12: 
        tmp2: 
        tmp25: 
        tmp28: 
        tmp3: 
        tmp30: 
        tmp35: 
        tmp37: 
        tmp4: 
        tmp41: 
        tmp42: 
        tmp5: 
    """

    tmp1 = np.copy(np.transpose(v.ovov, (2, 0, 3, 1)))
    tmp0 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 5, 2), (4, 1, 5, 3))
    tmp1 += np.transpose(tmp0, (1, 0, 2, 3)) * -1
    tmp12 = np.copy(np.transpose(v.ovvv, (0, 3, 2, 1))) * -1
    tmp11 = einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 4, 5), (2, 4, 5, 3))
    tmp12 += np.transpose(tmp11, (0, 2, 1, 3)) * -0.5
    del tmp11
    tmp28 = einsum(v.ooov, (0, 1, 2, 3), t2, (4, 0, 5, 3), (4, 1, 2, 5)) * -1
    tmp30 = einsum(t2, (0, 1, 2, 3), v.ovvv, (1, 4, 3, 5), (0, 2, 4, 5)) * -1
    tmp35 = np.copy(np.transpose(v.ovov, (2, 0, 1, 3))) * -1
    tmp35 += tmp0
    del tmp0
    tmp37 = np.copy(np.transpose(v.oooo, (2, 3, 1, 0))) * -1
    tmp37 += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (1, 0, 5, 4)) * 0.5
    tmp3 = np.copy(np.transpose(f.vv, (1, 0))) * 2
    tmp2 = einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 2), (4, 3)) * -1
    tmp3 += np.transpose(tmp2, (1, 0)) * -1
    tmp5 = np.copy(np.transpose(f.oo, (1, 0))) * 2
    tmp4 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 2, 3), (4, 1)) * -1
    tmp5 += np.transpose(tmp4, (1, 0))
    tmp25 = np.copy(np.transpose(v.ooov, (2, 1, 0, 3))) * -1
    tmp23 = einsum(t2, (0, 1, 2, 3), f.ov, (4, 3), (4, 0, 1, 2))
    tmp25 += np.transpose(tmp23, (0, 2, 1, 3))
    del tmp23
    tmp24 = einsum(v.ovvv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (4, 5, 0, 1))
    tmp25 += np.transpose(tmp24, (2, 1, 0, 3)) * -0.5
    del tmp24
    tmp41 = np.copy(f.ov) * 2
    tmp38 = einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp41 += tmp38 * 2
    tmp39 = einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 4, 3), (2, 4))
    tmp41 += tmp39 * -1
    tmp40 = einsum(v.ovvv, (0, 1, 2, 3), t2, (4, 0, 2, 3), (4, 1))
    tmp41 += tmp40 * -1
    tmp42 = np.copy(f.ov)
    tmp42 += tmp38
    del tmp38
    tmp42 += tmp39 * -0.5
    del tmp39
    tmp42 += tmp40 * -0.5
    del tmp40

    return {"tmp1": tmp1, "tmp12": tmp12, "tmp2": tmp2, "tmp25": tmp25, "tmp28": tmp28, "tmp3": tmp3, "tmp30": tmp30, "tmp35": tmp35, "tmp37": tmp37, "tmp4": tmp4, "tmp41": tmp41, "tmp42": tmp42, "tmp5": tmp5}

def hbar_matvec_ee(f=None, ints=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        t2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(r1, (0, 1), ints.tmp5, (0, 2), (2, 1)) * -0.5
    r1new += einsum(v.ovvv, (0, 1, 2, 3), r2, (4, 0, 2, 3), (4, 1)) * -0.5
    r1new += einsum(ints.tmp3, (0, 1), r1, (2, 0), (2, 1)) * 0.5
    r1new += einsum(r2, (0, 1, 2, 3), v.ooov, (0, 1, 4, 3), (4, 2)) * -0.5
    r1new += einsum(f.ov, (0, 1), r2, (2, 0, 3, 1), (2, 3))
    r1new += einsum(r1, (0, 1), ints.tmp1, (0, 2, 3, 1), (2, 3)) * -1
    tmp0 = einsum(v.oovv, (0, 1, 2, 3), r2, (4, 5, 2, 3), (4, 5, 0, 1))
    r2new = einsum(tmp0, (0, 1, 2, 3), t2, (2, 3, 4, 5), (1, 0, 5, 4)) * 0.25
    del tmp0
    r2new += einsum(r2, (0, 1, 2, 3), ints.tmp37, (1, 0, 4, 5), (4, 5, 3, 2)) * 0.5
    r2new += einsum(v.vvvv, (0, 1, 2, 3), r2, (4, 5, 3, 2), (5, 4, 1, 0)) * -0.5
    tmp10 = einsum(r1, (0, 1), ints.tmp41, (2, 3), (2, 0, 3, 1)) * -0.5
    tmp1 = einsum(ints.tmp12, (0, 1, 2, 3), r1, (4, 3), (0, 4, 1, 2))
    tmp10 += tmp1 * -1
    del tmp1
    tmp2 = einsum(r1, (0, 1), v.ooov, (0, 2, 3, 1), (2, 3)) * -1
    tmp3 = einsum(t2, (0, 1, 2, 3), tmp2, (1, 4), (0, 4, 2, 3)) * -1
    del tmp2
    tmp10 += np.transpose(tmp3, (0, 1, 3, 2))
    del tmp3
    tmp4 = np.copy(np.transpose(f.oo, (1, 0))) * 2
    tmp4 += np.transpose(ints.tmp4, (1, 0))
    tmp5 = einsum(tmp4, (0, 1), r2, (0, 2, 3, 4), (2, 1, 3, 4)) * 0.5
    del tmp4
    tmp10 += np.transpose(tmp5, (1, 0, 3, 2)) * -1
    del tmp5
    tmp6 = einsum(r1, (0, 1), f.ov, (2, 1), (2, 0))
    tmp8 = np.copy(np.transpose(tmp6, (1, 0)))
    del tmp6
    tmp7 = einsum(v.oovv, (0, 1, 2, 3), r2, (4, 0, 2, 3), (4, 1)) * -1
    tmp8 += tmp7 * 0.5
    del tmp7
    tmp9 = einsum(t2, (0, 1, 2, 3), tmp8, (4, 0), (1, 4, 2, 3))
    del tmp8
    tmp10 += np.transpose(tmp9, (1, 0, 3, 2)) * -1
    del tmp9
    r2new += np.transpose(tmp10, (0, 1, 3, 2))
    r2new += np.transpose(tmp10, (1, 0, 3, 2)) * -1
    del tmp10
    tmp11 = einsum(ints.tmp25, (0, 1, 2, 3), r1, (0, 4), (1, 2, 3, 4))
    tmp13 = np.copy(tmp11)
    del tmp11
    tmp12 = einsum(r2, (0, 1, 2, 3), ints.tmp2, (4, 3), (0, 1, 4, 2))
    tmp13 += np.transpose(tmp12, (1, 0, 2, 3)) * -0.5
    del tmp12
    r2new += np.transpose(tmp13, (1, 0, 2, 3)) * -1
    r2new += np.transpose(tmp13, (1, 0, 3, 2))
    del tmp13
    tmp14 = einsum(r1, (0, 1), ints.tmp28, (2, 0, 3, 4), (2, 3, 4, 1))
    tmp17 = np.copy(tmp14)
    del tmp14
    tmp15 = einsum(r1, (0, 1), ints.tmp30, (2, 3, 4, 1), (2, 0, 3, 4))
    tmp17 += tmp15
    del tmp15
    tmp16 = einsum(r2, (0, 1, 2, 3), ints.tmp35, (4, 1, 5, 3), (4, 0, 5, 2))
    tmp17 += tmp16 * -1
    del tmp16
    r2new += tmp17 * -1
    r2new += np.transpose(tmp17, (0, 1, 3, 2))
    r2new += np.transpose(tmp17, (1, 0, 2, 3))
    r2new += np.transpose(tmp17, (1, 0, 3, 2)) * -1
    del tmp17
    r2new += einsum(ints.tmp42, (0, 1), r1, (2, 3), (0, 2, 1, 3))
    r2new += einsum(ints.tmp42, (0, 1), r1, (2, 3), (2, 0, 1, 3)) * -1
    tmp18 = einsum(r2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2))
    r2new += np.transpose(tmp18, (1, 0, 2, 3))
    r2new += np.transpose(tmp18, (1, 0, 3, 2)) * -1
    del tmp18
    tmp19 = einsum(r1, (0, 1), v.ovvv, (0, 2, 1, 3), (2, 3)) * -1
    tmp20 = einsum(t2, (0, 1, 2, 3), tmp19, (4, 3), (0, 1, 2, 4)) * -1
    del tmp19
    tmp23 = np.copy(tmp20)
    del tmp20
    tmp21 = einsum(r2, (0, 1, 2, 3), v.oovv, (0, 1, 3, 4), (2, 4)) * -1
    tmp22 = einsum(tmp21, (0, 1), t2, (2, 3, 4, 1), (2, 3, 0, 4)) * -1
    del tmp21
    tmp23 += tmp22 * -0.5
    del tmp22
    r2new += tmp23
    r2new += np.transpose(tmp23, (0, 1, 3, 2)) * -1
    del tmp23


    return {"r1new": r1new, "r2new": r2new}

def hbar_lmatvec_ip_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp0: 
        tmp1: 
        tmp12: 
        tmp13: 
        tmp2: 
        tmp3: 
        tmp7: 
    """

    tmp0 = np.copy(np.transpose(v.ooov, (1, 0, 2, 3))) * 0.5
    tmp0 += einsum(f.ov, (0, 1), t2, (2, 3, 4, 1), (3, 2, 0, 4)) * -0.5
    tmp0 += einsum(v.ooov, (0, 1, 2, 3), t2, (1, 4, 3, 5), (4, 2, 0, 5))
    tmp0 += einsum(v.ovvv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (5, 4, 0, 1)) * 0.25
    tmp3 = np.copy(np.transpose(f.oo, (1, 0)))
    tmp2 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 0, 2, 3), (1, 4)) * -1
    tmp3 += tmp2 * 0.5
    tmp12 = np.copy(np.transpose(v.oooo, (2, 3, 1, 0))) * -2
    tmp12 += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 5, 2, 3), (1, 0, 5, 4))
    tmp13 = np.copy(np.transpose(f.vv, (1, 0)))
    tmp13 += einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 4, 2), (3, 4)) * 0.5
    tmp7 = np.copy(np.transpose(v.ovov, (2, 0, 1, 3))) * -1
    tmp6 = einsum(v.oovv, (0, 1, 2, 3), t2, (1, 4, 3, 5), (4, 0, 5, 2))
    tmp7 += tmp6
    del tmp6
    tmp1 = np.copy(f.ov) * 2
    tmp1 += einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2)) * 2
    tmp1 += einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 3, 4), (2, 4))
    tmp1 += einsum(v.ovvv, (0, 1, 2, 3), t2, (0, 4, 2, 3), (4, 1))

    return {"tmp0": tmp0, "tmp1": tmp1, "tmp12": tmp12, "tmp13": tmp13, "tmp2": tmp2, "tmp3": tmp3, "tmp7": tmp7}

def hbar_lmatvec_ip(f=None, ints=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        t2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(r1, (0,), ints.tmp3, (0, 1), (1,)) * -1
    r1new += einsum(ints.tmp1, (0, 1), r2, (2, 0, 1), (2,)) * 0.5
    r1new += einsum(ints.tmp0, (0, 1, 2, 3), r2, (1, 0, 3), (2,)) * -1
    r2new = einsum(v.ooov, (0, 1, 2, 3), r1, (2,), (1, 0, 3))
    r2new += einsum(ints.tmp13, (0, 1), r2, (2, 3, 0), (3, 2, 1)) * -1
    tmp0 = einsum(t2, (0, 1, 2, 3), r2, (0, 1, 2), (3,)) * -1
    r2new += einsum(v.oovv, (0, 1, 2, 3), tmp0, (3,), (0, 1, 2)) * 0.5
    del tmp0
    r2new += einsum(ints.tmp12, (0, 1, 2, 3), r2, (1, 0, 4), (2, 3, 4)) * -0.25
    tmp1 = einsum(r2, (0, 1, 2), f.oo, (3, 1), (3, 0, 2))
    tmp3 = np.copy(tmp1)
    del tmp1
    tmp2 = einsum(r2, (0, 1, 2), ints.tmp7, (1, 3, 2, 4), (3, 0, 4))
    tmp3 += tmp2 * -1
    del tmp2
    r2new += tmp3
    r2new += np.transpose(tmp3, (1, 0, 2)) * -1
    del tmp3
    tmp5 = einsum(r1, (0,), f.ov, (1, 2), (1, 0, 2))
    tmp4 = einsum(ints.tmp2, (0, 1), r2, (2, 0, 3), (1, 2, 3))
    tmp5 += tmp4 * -0.5
    del tmp4
    r2new += tmp5 * -1
    r2new += np.transpose(tmp5, (1, 0, 2))
    del tmp5

    return {"r1new": r1new, "r2new": r2new}

def hbar_lmatvec_ea_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp0: 
        tmp1: 
        tmp11: 
        tmp12: 
        tmp2: 
        tmp3: 
        tmp8: 
    """

    tmp0 = np.copy(np.transpose(v.ovvv, (0, 1, 3, 2)))
    tmp0 += einsum(f.ov, (0, 1), t2, (2, 0, 3, 4), (2, 1, 4, 3)) * -1
    tmp0 += einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 4, 5), (2, 3, 5, 4)) * 0.5
    tmp0 += einsum(v.ovvv, (0, 1, 2, 3), t2, (0, 4, 3, 5), (4, 2, 5, 1)) * 2
    tmp3 = np.copy(np.transpose(f.vv, (1, 0)))
    tmp2 = einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 4, 2), (3, 4)) * -1
    tmp3 += tmp2 * -0.5
    tmp11 = np.copy(np.transpose(v.vvvv, (2, 3, 1, 0))) * -1
    tmp11 += einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 4, 5), (3, 2, 5, 4)) * 0.5
    tmp12 = np.copy(np.transpose(f.oo, (1, 0)))
    tmp12 += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 0, 2, 3), (1, 4)) * -0.5
    tmp8 = np.copy(np.transpose(v.ovov, (2, 0, 1, 3))) * -1
    tmp7 = einsum(v.oovv, (0, 1, 2, 3), t2, (1, 4, 3, 5), (4, 0, 5, 2))
    tmp8 += tmp7
    del tmp7
    tmp1 = np.copy(f.ov) * 2
    tmp1 += einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2)) * 2
    tmp1 += einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 3, 4), (2, 4))
    tmp1 += einsum(v.ovvv, (0, 1, 2, 3), t2, (0, 4, 2, 3), (4, 1))

    return {"tmp0": tmp0, "tmp1": tmp1, "tmp11": tmp11, "tmp12": tmp12, "tmp2": tmp2, "tmp3": tmp3, "tmp8": tmp8}

def hbar_lmatvec_ea(f=None, ints=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        t2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(r2, (0, 1, 2), ints.tmp0, (2, 3, 1, 0), (3,)) * -0.5
    r1new += einsum(ints.tmp3, (0, 1), r1, (0,), (1,))
    r1new += einsum(ints.tmp1, (0, 1), r2, (2, 1, 0), (2,)) * 0.5
    r2new = einsum(ints.tmp12, (0, 1), r2, (2, 3, 0), (3, 2, 1))
    tmp0 = einsum(t2, (0, 1, 2, 3), r2, (2, 3, 0), (1,)) * -1
    r2new += einsum(tmp0, (0,), v.oovv, (1, 0, 2, 3), (3, 2, 1)) * -0.5
    del tmp0
    r2new += einsum(r1, (0,), v.ovvv, (1, 0, 2, 3), (3, 2, 1))
    r2new += einsum(r2, (0, 1, 2), ints.tmp11, (0, 1, 3, 4), (3, 4, 2)) * 0.5
    tmp3 = einsum(r1, (0,), f.ov, (1, 2), (1, 2, 0))
    tmp1 = np.copy(np.transpose(f.vv, (1, 0))) * 2
    tmp1 += ints.tmp2 * -1
    tmp2 = einsum(r2, (0, 1, 2), tmp1, (0, 3), (2, 1, 3)) * 0.5
    del tmp1
    tmp3 += np.transpose(tmp2, (0, 2, 1)) * -1
    del tmp2
    r2new += np.transpose(tmp3, (1, 2, 0)) * -1
    r2new += np.transpose(tmp3, (2, 1, 0))
    del tmp3
    tmp4 = einsum(ints.tmp8, (0, 1, 2, 3), r2, (4, 2, 0), (1, 3, 4))
    r2new += np.transpose(tmp4, (1, 2, 0)) * -1
    r2new += np.transpose(tmp4, (2, 1, 0))
    del tmp4

    return {"r1new": r1new, "r2new": r2new}

def hbar_lmatvec_ee_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp10: 
        tmp2: 
        tmp22: 
        tmp25: 
        tmp3: 
        tmp4: 
        tmp6: 
        tmp7: 
        tmp8: 
        tmp9: 
    """

    tmp2 = np.copy(np.transpose(v.ovvv, (0, 3, 2, 1))) * -1
    tmp2 += einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 4, 5), (2, 5, 4, 3)) * -0.5
    tmp2 += einsum(v.ovvv, (0, 1, 2, 3), t2, (0, 4, 3, 5), (4, 5, 1, 2)) * -2
    tmp6 = np.copy(np.transpose(v.ovov, (2, 0, 3, 1)))
    tmp5 = einsum(v.oovv, (0, 1, 2, 3), t2, (1, 4, 3, 5), (4, 0, 5, 2))
    tmp6 += np.transpose(tmp5, (0, 1, 3, 2)) * -1
    tmp25 = np.copy(np.transpose(v.oooo, (2, 3, 1, 0))) * -1
    tmp25 += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 5, 2, 3), (1, 0, 5, 4)) * 0.5
    tmp3 = np.copy(np.transpose(v.ooov, (2, 1, 0, 3)))
    tmp3 += einsum(t2, (0, 1, 2, 3), f.ov, (4, 3), (4, 1, 0, 2)) * -1
    tmp3 += einsum(v.ooov, (0, 1, 2, 3), t2, (1, 4, 3, 5), (0, 4, 2, 5)) * 2
    tmp3 += einsum(v.ovvv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (0, 5, 4, 1)) * 0.5
    tmp8 = np.copy(np.transpose(f.vv, (1, 0))) * 2
    tmp7 = einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 4, 2), (3, 4)) * -1
    tmp8 += tmp7 * -1
    tmp10 = np.copy(np.transpose(f.oo, (1, 0))) * 2
    tmp9 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 0, 2, 3), (1, 4)) * -1
    tmp10 += tmp9
    tmp22 = np.copy(np.transpose(v.ovov, (2, 0, 1, 3))) * -1
    tmp22 += tmp5
    del tmp5
    tmp4 = np.copy(f.ov)
    tmp4 += einsum(t2, (0, 1, 2, 3), f.ov, (1, 3), (0, 2))
    tmp4 += einsum(v.ooov, (0, 1, 2, 3), t2, (0, 1, 3, 4), (2, 4)) * 0.5
    tmp4 += einsum(v.ovvv, (0, 1, 2, 3), t2, (0, 4, 2, 3), (4, 1)) * 0.5

    return {"tmp10": tmp10, "tmp2": tmp2, "tmp22": tmp22, "tmp25": tmp25, "tmp3": tmp3, "tmp4": tmp4, "tmp6": tmp6, "tmp7": tmp7, "tmp8": tmp8, "tmp9": tmp9}

def hbar_lmatvec_ee(f=None, ints=None, r1=None, r2=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        t2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(r1, (0, 1), ints.tmp10, (0, 2), (2, 1)) * -0.5
    r1new += einsum(r2, (0, 1, 2, 3), ints.tmp2, (1, 3, 2, 4), (0, 4)) * 0.5
    tmp0 = einsum(r2, (0, 1, 2, 3), t2, (1, 4, 2, 3), (0, 4)) * -1
    r1new += einsum(tmp0, (0, 1), f.ov, (1, 2), (0, 2)) * -0.5
    r1new += einsum(ints.tmp8, (0, 1), r1, (2, 0), (2, 1)) * 0.5
    r1new += einsum(tmp0, (0, 1), v.ooov, (2, 1, 0, 3), (2, 3)) * 0.5
    r1new += einsum(r2, (0, 1, 2, 3), ints.tmp3, (4, 0, 1, 3), (4, 2)) * 0.5
    r1new += einsum(r2, (0, 1, 2, 3), ints.tmp4, (1, 3), (0, 2))
    r1new += einsum(r1, (0, 1), ints.tmp6, (0, 2, 3, 1), (2, 3)) * -1
    tmp1 = einsum(r2, (0, 1, 2, 3), t2, (0, 1, 2, 4), (3, 4))
    r1new += einsum(tmp1, (0, 1), v.ovvv, (2, 0, 3, 1), (2, 3)) * 0.5
    tmp2 = einsum(t2, (0, 1, 2, 3), r2, (4, 5, 2, 3), (4, 5, 0, 1))
    r2new = einsum(v.oovv, (0, 1, 2, 3), tmp2, (4, 5, 0, 1), (5, 4, 3, 2)) * 0.25
    del tmp2
    r2new += einsum(r2, (0, 1, 2, 3), ints.tmp25, (1, 0, 4, 5), (4, 5, 3, 2)) * 0.5
    r2new += einsum(v.vvvv, (0, 1, 2, 3), r2, (4, 5, 3, 2), (5, 4, 1, 0)) * -0.5
    tmp3 = einsum(tmp0, (0, 1), v.oovv, (2, 1, 3, 4), (0, 2, 3, 4)) * -1
    del tmp0
    tmp6 = np.copy(np.transpose(tmp3, (0, 1, 3, 2))) * 0.5
    del tmp3
    tmp4 = np.copy(np.transpose(f.oo, (1, 0))) * 2
    tmp4 += ints.tmp9
    tmp5 = einsum(tmp4, (0, 1), r2, (0, 2, 3, 4), (2, 1, 3, 4)) * 0.5
    del tmp4
    tmp6 += np.transpose(tmp5, (1, 0, 3, 2))
    del tmp5
    r2new += tmp6
    r2new += np.transpose(tmp6, (1, 0, 2, 3)) * -1
    del tmp6
    tmp7 = einsum(r1, (0, 1), v.ooov, (2, 3, 0, 4), (2, 3, 1, 4))
    tmp9 = np.copy(np.transpose(tmp7, (1, 0, 2, 3))) * -1
    del tmp7
    tmp8 = einsum(r2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2))
    tmp9 += np.transpose(tmp8, (1, 0, 2, 3)) * -1
    del tmp8
    r2new += tmp9 * -1
    r2new += np.transpose(tmp9, (0, 1, 3, 2))
    del tmp9
    tmp11 = einsum(r1, (0, 1), f.ov, (2, 3), (2, 0, 3, 1))
    tmp10 = einsum(r2, (0, 1, 2, 3), ints.tmp22, (1, 4, 3, 5), (4, 0, 5, 2))
    tmp11 += tmp10
    del tmp10
    r2new += tmp11
    r2new += np.transpose(tmp11, (0, 1, 3, 2)) * -1
    r2new += np.transpose(tmp11, (1, 0, 2, 3)) * -1
    r2new += np.transpose(tmp11, (1, 0, 3, 2))
    del tmp11
    tmp12 = einsum(r1, (0, 1), v.ovvv, (2, 1, 3, 4), (0, 2, 3, 4))
    r2new += np.transpose(tmp12, (0, 1, 3, 2))
    r2new += np.transpose(tmp12, (1, 0, 3, 2)) * -1
    del tmp12
    tmp13 = einsum(r2, (0, 1, 2, 3), ints.tmp7, (3, 4), (0, 1, 4, 2))
    r2new += np.transpose(tmp13, (1, 0, 2, 3)) * -0.5
    r2new += np.transpose(tmp13, (1, 0, 3, 2)) * 0.5
    del tmp13
    tmp14 = einsum(v.oovv, (0, 1, 2, 3), tmp1, (4, 3), (0, 1, 4, 2)) * -1
    del tmp1
    r2new += tmp14 * -0.5
    r2new += np.transpose(tmp14, (0, 1, 3, 2)) * 0.5
    del tmp14


    return {"r1new": r1new, "r2new": r2new}


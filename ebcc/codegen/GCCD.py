"""
Code generated by `albert`:
https://github.com/obackhouse/albert

  * date: 2024-08-09T21:29:11.047320
  * python version: 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
  * albert version: 0.0.0
  * caller: /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/albert/codegen/einsum.py
  * node: fv-az1487-369
  * system: Linux
  * processor: x86_64
  * release: 6.5.0-1025-azure
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, direct_sum, Namespace


def energy(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-09T21:29:11.115161.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    e_cc : float
        Coupled cluster energy.
    """

    e_cc = einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 2, 3), ()) * 0.25

    return e_cc

def update_amps(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-09T21:29:12.381353.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    t2new : array
        Updated T2 residuals.
    """

    tmp6 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 2, 3), (0, 4))
    tmp2 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    tmp4 = einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 4, 3), (2, 4))
    tmp7 = einsum(t2, (0, 1, 2, 3), tmp6, (4, 1), (0, 4, 2, 3))
    del tmp6
    t2new = tmp7.transpose((1, 0, 3, 2)).copy() * -0.5
    t2new += tmp7.transpose((0, 1, 3, 2)) * 0.5
    del tmp7
    tmp3 = einsum(tmp2, (0, 1, 2, 3), t2, (4, 1, 5, 3), (0, 4, 2, 5))
    del tmp2
    t2new += tmp3.transpose((0, 1, 3, 2)) * -1
    t2new += tmp3
    del tmp3
    tmp0 = einsum(f.vv, (0, 1), t2, (2, 3, 4, 1), (2, 3, 0, 4))
    t2new += tmp0.transpose((1, 0, 3, 2)) * -1
    t2new += tmp0.transpose((1, 0, 2, 3))
    del tmp0
    tmp5 = einsum(t2, (0, 1, 2, 3), tmp4, (4, 3), (0, 1, 2, 4))
    del tmp4
    t2new += tmp5.transpose((0, 1, 3, 2)) * 0.5
    t2new += tmp5 * -0.5
    del tmp5
    tmp1 = einsum(f.oo, (0, 1), t2, (2, 1, 3, 4), (0, 2, 3, 4))
    t2new += tmp1.transpose((1, 0, 3, 2))
    t2new += tmp1.transpose((0, 1, 3, 2)) * -1
    del tmp1
    tmp8 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 5, 1), (4, 0, 5, 3))
    t2new += tmp8.transpose((1, 0, 3, 2)) * -1
    t2new += tmp8.transpose((1, 0, 2, 3))
    t2new += tmp8.transpose((0, 1, 3, 2))
    t2new += tmp8 * -1
    del tmp8
    tmp9 = v.oooo.copy()
    tmp9 += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 5, 2, 3), (4, 5, 0, 1)) * 0.5
    t2new += einsum(tmp9, (0, 1, 2, 3), t2, (0, 1, 4, 5), (2, 3, 4, 5)) * 0.5
    del tmp9
    t2new += v.oovv
    t2new += einsum(v.vvvv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (4, 5, 0, 1)) * 0.5

    return {f"t2new": t2new}

def update_lams(f=None, l2=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-09T21:29:14.129033.

    Parameters
    ----------
    f : array
        Fock matrix.
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    l2new : array
        Updated L2 residuals.
    """

    tmp8 = einsum(t2, (0, 1, 2, 3), l2, (2, 3, 4, 1), (4, 0))
    tmp6 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 2, 3), (0, 4))
    tmp11 = einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 3), (4, 2))
    tmp13 = einsum(t2, (0, 1, 2, 3), l2, (4, 3, 0, 1), (4, 2))
    tmp3 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 5, 3), (0, 4, 2, 5))
    tmp9 = einsum(tmp8, (0, 1), v.oovv, (2, 1, 3, 4), (0, 2, 3, 4)) * -1
    del tmp8
    tmp7 = einsum(tmp6, (0, 1), l2, (2, 3, 4, 0), (4, 1, 2, 3))
    del tmp6
    tmp12 = einsum(l2, (0, 1, 2, 3), tmp11, (1, 4), (2, 3, 0, 4))
    del tmp11
    tmp14 = einsum(v.oovv, (0, 1, 2, 3), tmp13, (4, 3), (0, 1, 4, 2)) * -1
    del tmp13
    tmp4 = v.ovov.transpose((0, 2, 3, 1)).copy() * -1
    tmp4 += tmp3
    del tmp3
    tmp10 = tmp7.transpose((0, 1, 3, 2)).copy() * -0.5
    del tmp7
    tmp10 += tmp9.transpose((0, 1, 3, 2)) * -0.5
    del tmp9
    l2new = tmp10.transpose((3, 2, 1, 0)).copy() * -1
    l2new += tmp10.transpose((3, 2, 0, 1))
    del tmp10
    tmp15 = tmp12.copy() * 0.5
    del tmp12
    tmp15 += tmp14 * 0.5
    del tmp14
    l2new += tmp15.transpose((3, 2, 1, 0)) * -1
    l2new += tmp15.transpose((2, 3, 1, 0))
    del tmp15
    tmp16 = v.oooo.copy() * 2
    tmp16 += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 5, 2, 3), (4, 5, 0, 1))
    l2new += einsum(tmp16, (0, 1, 2, 3), l2, (4, 5, 0, 1), (4, 5, 2, 3)) * 0.25
    del tmp16
    tmp0 = einsum(l2, (0, 1, 2, 3), t2, (4, 5, 0, 1), (2, 3, 4, 5))
    l2new += einsum(v.oovv, (0, 1, 2, 3), tmp0, (4, 5, 1, 0), (2, 3, 4, 5)) * -0.25
    del tmp0
    tmp5 = einsum(tmp4, (0, 1, 2, 3), l2, (4, 2, 5, 0), (5, 1, 4, 3))
    del tmp4
    l2new += tmp5.transpose((3, 2, 1, 0))
    l2new += tmp5.transpose((2, 3, 1, 0)) * -1
    l2new += tmp5.transpose((3, 2, 0, 1)) * -1
    l2new += tmp5.transpose((2, 3, 0, 1))
    del tmp5
    tmp1 = einsum(l2, (0, 1, 2, 3), f.vv, (4, 1), (2, 3, 4, 0))
    l2new += tmp1.transpose((3, 2, 1, 0)) * -1
    l2new += tmp1.transpose((2, 3, 1, 0))
    del tmp1
    tmp2 = einsum(l2, (0, 1, 2, 3), f.oo, (4, 3), (4, 2, 0, 1))
    l2new += tmp2.transpose((3, 2, 1, 0))
    l2new += tmp2.transpose((3, 2, 0, 1)) * -1
    del tmp2
    l2new += v.oovv.transpose((2, 3, 0, 1))
    l2new += einsum(v.vvvv, (0, 1, 2, 3), l2, (2, 3, 4, 5), (0, 1, 4, 5)) * 0.5

    return {f"l2new": l2new}

def make_rdm1_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-09T21:29:14.281838.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm1 : array
        One-particle reduced density matrix.
    """

    rdm1 = Namespace()
    delta = Namespace(
        oo=np.eye(t2.shape[0]),
        vv=np.eye(t2.shape[-1]),
    )
    rdm1.oo = einsum(l2, (0, 1, 2, 3), t2, (4, 3, 0, 1), (4, 2)) * -0.5
    rdm1.oo += delta.oo
    del delta
    rdm1.vv = einsum(t2, (0, 1, 2, 3), l2, (4, 3, 0, 1), (4, 2)) * 0.5
    rdm1.ov = np.zeros((t2.shape[0], t2.shape[-1]))
    rdm1.vo = np.zeros((t2.shape[-1], t2.shape[0]))
    rdm1 = np.block([[rdm1.oo, rdm1.ov], [rdm1.vo, rdm1.vv]])

    return rdm1

def make_rdm2_f(l2=None, t2=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-09T21:29:15.840532.

    Parameters
    ----------
    l2 : array
        L2 amplitudes.
    t2 : array
        T2 amplitudes.

    Returns
    -------
    rdm2 : array
        Two-particle reduced density matrix.
    """

    rdm2 = Namespace()
    delta = Namespace(
        oo=np.eye(t2.shape[0]),
        vv=np.eye(t2.shape[-1]),
    )
    tmp1 = einsum(t2, (0, 1, 2, 3), l2, (2, 3, 4, 1), (4, 0))
    rdm2.oooo = einsum(delta.oo, (0, 1), tmp1, (2, 3), (0, 3, 1, 2)) * -0.5
    rdm2.oooo += einsum(delta.oo, (0, 1), tmp1, (2, 3), (3, 0, 1, 2)) * 0.5
    rdm2.oooo += einsum(delta.oo, (0, 1), tmp1, (2, 3), (0, 3, 2, 1)) * 0.5
    rdm2.oooo += einsum(delta.oo, (0, 1), tmp1, (2, 3), (3, 0, 2, 1)) * -0.5
    tmp2 = einsum(l2, (0, 1, 2, 3), t2, (4, 3, 5, 1), (2, 4, 0, 5))
    rdm2.vovo = tmp2.transpose((2, 1, 3, 0)).copy() * -1
    rdm2.voov = tmp2.transpose((2, 1, 0, 3)).copy()
    rdm2.ovvo = tmp2.transpose((1, 2, 3, 0)).copy()
    rdm2.ovov = tmp2.transpose((1, 2, 0, 3)).copy() * -1
    tmp4 = einsum(l2, (0, 1, 2, 3), t2, (2, 3, 4, 1), (0, 4))
    rdm2.vovo += einsum(delta.oo, (0, 1), tmp4, (2, 3), (2, 0, 3, 1)) * 0.5
    rdm2.voov += einsum(delta.oo, (0, 1), tmp4, (2, 3), (2, 0, 1, 3)) * -0.5
    rdm2.ovvo += einsum(delta.oo, (0, 1), tmp4, (2, 3), (0, 2, 3, 1)) * -0.5
    rdm2.ovov += einsum(delta.oo, (0, 1), tmp4, (2, 3), (0, 2, 1, 3)) * 0.5
    tmp6 = einsum(t2, (0, 1, 2, 3), tmp1, (1, 4), (0, 4, 2, 3))
    del tmp1
    rdm2.oovv = tmp6.transpose((1, 0, 3, 2)).copy() * -0.5
    rdm2.oovv += tmp6.transpose((0, 1, 3, 2)) * 0.5
    del tmp6
    tmp3 = einsum(tmp2, (0, 1, 2, 3), t2, (4, 0, 5, 2), (1, 4, 3, 5))
    del tmp2
    rdm2.oovv += tmp3.transpose((0, 1, 3, 2)) * -1
    rdm2.oovv += tmp3
    del tmp3
    tmp0 = einsum(l2, (0, 1, 2, 3), t2, (4, 5, 0, 1), (2, 3, 4, 5))
    rdm2.oovv += einsum(t2, (0, 1, 2, 3), tmp0, (1, 0, 4, 5), (5, 4, 2, 3)) * 0.25
    rdm2.oooo += tmp0.transpose((3, 2, 1, 0)) * 0.5
    del tmp0
    tmp5 = einsum(tmp4, (0, 1), t2, (2, 3, 4, 0), (2, 3, 4, 1))
    del tmp4
    rdm2.oovv += tmp5.transpose((0, 1, 3, 2)) * 0.5
    rdm2.oovv += tmp5 * -0.5
    del tmp5
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (2, 0, 3, 1))
    rdm2.oooo += einsum(delta.oo, (0, 1), delta.oo, (2, 3), (2, 0, 1, 3)) * -1
    del delta
    rdm2.oovv += t2
    rdm2.vvoo = l2.copy()
    rdm2.vvvv = einsum(l2, (0, 1, 2, 3), t2, (2, 3, 4, 5), (0, 1, 4, 5)) * 0.5
    rdm2.ooov = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[-1]))
    rdm2.oovo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[-1], t2.shape[0]))
    rdm2.ovoo = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[0], t2.shape[0]))
    rdm2.vooo = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.ovvv = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[-1], t2.shape[-1]))
    rdm2.vovv = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[-1], t2.shape[-1]))
    rdm2.vvov = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[0], t2.shape[-1]))
    rdm2.vvvo = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[-1], t2.shape[0]))
    rdm2 = pack_2e(rdm2.oooo, rdm2.ooov, rdm2.oovo, rdm2.ovoo, rdm2.vooo, rdm2.oovv, rdm2.ovov, rdm2.ovvo, rdm2.voov, rdm2.vovo, rdm2.vvoo, rdm2.ovvv, rdm2.vovv, rdm2.vvov, rdm2.vvvo, rdm2.vvvv)
    rdm2 = rdm2.swapaxes(1, 2)

    return rdm2


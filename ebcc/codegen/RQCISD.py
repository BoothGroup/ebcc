"""
Code generated by `albert`:
https://github.com/obackhouse/albert

  * date: 2024-07-18T10:18:02.485159
  * python version: 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]
  * albert version: 0.0.0
  * caller: /home/ollie/git/albert/albert/codegen/einsum.py
  * node: ollie-desktop
  * system: Linux
  * processor: x86_64
  * release: 6.5.0-44-generic
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, direct_sum, Namespace


def energy(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-07-18T10:18:02.647075.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    e_cc : float
        Coupled cluster energy.
    """

    e_cc = einsum(v.ovov, (0, 1, 2, 3), t2, (0, 2, 1, 3), (), optimize=True) * 2
    e_cc += einsum(v.ovov, (0, 1, 2, 3), t2, (0, 2, 3, 1), (), optimize=True) * -1

    return e_cc

def update_amps(f=None, t1=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-07-18T10:18:06.300305.

    Parameters
    ----------
    f : array
        Fock matrix.
    t1 : array
        T1 amplitudes.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    t1new : array
        Updated T1 residuals.
    t2new : array
        Updated T2 residuals.
    """

    tmp14 = v.ovov.transpose((2, 0, 1, 3)).copy() * -1
    tmp14 += v.ovov.transpose((2, 0, 3, 1)) * 2
    tmp18 = v.ovov.transpose((2, 0, 1, 3)).copy()
    tmp18 += v.ovov.transpose((2, 0, 3, 1)) * -0.5
    tmp15 = einsum(tmp14, (0, 1, 2, 3), t2, (0, 4, 2, 5), (4, 1, 5, 3), optimize=True)
    del tmp14
    tmp21 = einsum(tmp18, (0, 1, 2, 3), t2, (0, 4, 3, 2), (4, 1), optimize=True) * 2
    tmp19 = einsum(t2, (0, 1, 2, 3), tmp18, (0, 1, 3, 4), (2, 4), optimize=True)
    del tmp18
    tmp16 = einsum(tmp15, (0, 1, 2, 3), t2, (1, 4, 5, 3), (4, 0, 5, 2), optimize=True)
    tmp13 = einsum(t1, (0, 1), v.ooov, (2, 0, 3, 4), (2, 3, 1, 4), optimize=True)
    tmp9 = einsum(t2, (0, 1, 2, 3), v.ovov, (1, 2, 4, 5), (0, 4, 3, 5), optimize=True)
    t2new = tmp9.transpose((1, 0, 3, 2)).copy() * -1
    tmp11 = einsum(t1, (0, 1), v.ovvv, (2, 3, 4, 1), (0, 2, 3, 4), optimize=True)
    tmp10 = einsum(t2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2), optimize=True)
    tmp22 = einsum(t2, (0, 1, 2, 3), tmp21, (4, 0), (1, 4, 2, 3), optimize=True)
    del tmp21
    tmp20 = einsum(tmp19, (0, 1), t2, (2, 3, 1, 4), (2, 3, 4, 0), optimize=True) * 2
    del tmp19
    tmp1 = einsum(t1, (0, 1), v.ovov, (2, 3, 4, 1), (0, 2, 4, 3), optimize=True)
    tmp3 = v.ovov.transpose((2, 0, 1, 3)).copy() * 2
    tmp3 += v.ovov.transpose((2, 0, 3, 1)) * -1
    tmp7 = v.ovov.transpose((2, 0, 1, 3)).copy() * -1
    tmp7 += v.ovov.transpose((2, 0, 3, 1)) * 2
    tmp17 = tmp13.copy()
    del tmp13
    tmp17 += tmp16.transpose((1, 0, 3, 2))
    del tmp16
    t2new += tmp17.transpose((1, 0, 3, 2)) * -1
    t2new += tmp17 * -1
    del tmp17
    tmp28 = v.oovv.transpose((1, 0, 3, 2)).copy() * -1
    tmp28 += einsum(t2, (0, 1, 2, 3), v.ovov, (1, 4, 5, 2), (0, 5, 3, 4), optimize=True)
    t2new += einsum(t2, (0, 1, 2, 3), tmp28, (4, 0, 5, 3), (4, 1, 2, 5), optimize=True)
    del tmp28
    tmp27 = v.ovov.transpose((2, 0, 3, 1)).copy() * -1
    tmp27 += tmp9
    del tmp9
    t2new += einsum(tmp27, (0, 1, 2, 3), t2, (1, 4, 5, 3), (4, 0, 5, 2), optimize=True)
    del tmp27
    tmp12 = tmp10.copy()
    del tmp10
    tmp12 += tmp11
    del tmp11
    t2new += tmp12.transpose((1, 0, 2, 3))
    t2new += tmp12.transpose((0, 1, 3, 2))
    del tmp12
    tmp23 = tmp20.transpose((1, 0, 2, 3)).copy()
    del tmp20
    tmp23 += tmp22.transpose((0, 1, 3, 2))
    del tmp22
    t2new += tmp23.transpose((1, 0, 3, 2)) * -1
    t2new += tmp23 * -1
    del tmp23
    tmp26 = v.oooo.transpose((2, 3, 1, 0)).copy()
    tmp26 += einsum(v.ovov, (0, 1, 2, 3), t2, (4, 5, 3, 1), (0, 5, 2, 4), optimize=True)
    t2new += einsum(t2, (0, 1, 2, 3), tmp26, (0, 4, 1, 5), (4, 5, 2, 3), optimize=True)
    del tmp26
    tmp25 = v.ovov.transpose((2, 0, 3, 1)).copy() * 2
    tmp25 += v.oovv.transpose((1, 0, 3, 2)) * -1
    tmp25 += tmp15 * 2
    del tmp15
    t2new += einsum(tmp25, (0, 1, 2, 3), t2, (1, 4, 3, 5), (4, 0, 5, 2), optimize=True)
    del tmp25
    tmp24 = einsum(t2, (0, 1, 2, 3), f.oo, (4, 1), (4, 0, 2, 3), optimize=True)
    t2new += tmp24.transpose((1, 0, 2, 3)) * -1
    t2new += tmp24.transpose((0, 1, 3, 2)) * -1
    del tmp24
    tmp2 = v.ooov.transpose((1, 0, 2, 3)).copy() * -0.5
    tmp2 += v.ooov.transpose((1, 2, 0, 3))
    tmp2 += tmp1
    tmp2 += tmp1.transpose((0, 2, 1, 3)) * -0.5
    del tmp1
    t1new = einsum(t2, (0, 1, 2, 3), tmp2, (4, 1, 0, 3), (4, 2), optimize=True) * -2
    del tmp2
    tmp4 = f.ov.copy()
    tmp4 += einsum(tmp3, (0, 1, 2, 3), t1, (0, 3), (1, 2), optimize=True)
    del tmp3
    tmp8 = f.oo.transpose((1, 0)).copy() * 0.5
    tmp8 += einsum(t2, (0, 1, 2, 3), tmp7, (0, 4, 2, 3), (4, 1), optimize=True) * 0.5
    del tmp7
    t1new += einsum(t1, (0, 1), tmp8, (0, 2), (2, 1), optimize=True) * -2
    del tmp8
    tmp5 = t2.transpose((1, 0, 2, 3)).copy() * 2
    tmp5 += t2.transpose((1, 0, 3, 2)) * -1
    t1new += einsum(tmp5, (0, 1, 2, 3), tmp4, (0, 3), (1, 2), optimize=True)
    del tmp5, tmp4
    tmp6 = v.ovov.transpose((2, 0, 3, 1)).copy() * 2
    tmp6 += v.oovv.transpose((1, 0, 3, 2)) * -1
    t1new += einsum(t1, (0, 1), tmp6, (0, 2, 1, 3), (2, 3), optimize=True)
    del tmp6
    tmp0 = v.ovvv.transpose((0, 1, 3, 2)).copy() * -0.5
    tmp0 += v.ovvv.transpose((0, 3, 1, 2))
    t1new += einsum(tmp0, (0, 1, 2, 3), t2, (0, 4, 2, 1), (4, 3), optimize=True) * 2
    del tmp0
    t1new += einsum(t1, (0, 1), f.vv, (2, 1), (0, 2), optimize=True)
    t2new += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 1, 5, 3), (0, 4, 2, 5), optimize=True) * -1
    t2new += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 5, 2), (0, 4, 5, 3), optimize=True) * -1
    t2new += einsum(v.ovov, (0, 1, 2, 3), t2, (4, 0, 5, 1), (2, 4, 3, 5), optimize=True) * 2
    t2new += v.ovov.transpose((2, 0, 3, 1))
    t2new += einsum(v.vvvv, (0, 1, 2, 3), t2, (4, 5, 1, 3), (5, 4, 2, 0), optimize=True)

    return {f"t1new": t1new, f"t2new": t2new}


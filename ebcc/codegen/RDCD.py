"""
Code generated by `albert`:
https://github.com/obackhouse/albert

  * date: 2024-09-28T14:08:34.947053
  * python version: 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
  * albert version: 0.0.0
  * caller: /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/albert/codegen/einsum.py
  * node: fv-az1272-977
  * system: Linux
  * processor: x86_64
  * release: 6.8.0-1014-azure
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, dirsum, Namespace


def energy(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T14:08:35.209218.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    e_cc : float
        Coupled cluster energy.
    """

    e_cc = einsum(v.ovov, (0, 1, 2, 3), t2, (0, 2, 1, 3), ()) * 2
    e_cc += einsum(v.ovov, (0, 1, 2, 3), t2, (0, 2, 3, 1), ()) * -1

    return e_cc

def update_amps(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-09-28T14:08:38.367227.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    t2new : array
        Updated T2 residuals.
    """

    tmp9 = np.copy(np.transpose(v.ovov, (0, 2, 3, 1)))
    tmp9 += np.transpose(v.ovov, (0, 2, 1, 3)) * -0.5
    tmp6 = np.copy(np.transpose(v.ovov, (0, 2, 3, 1))) * -0.5
    tmp6 += np.transpose(v.ovov, (0, 2, 1, 3))
    tmp10 = einsum(tmp9, (0, 1, 2, 3), t2, (4, 0, 2, 3), (4, 1)) * 2
    del tmp9
    tmp0 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 3, 5), (4, 0, 5, 1))
    tmp7 = einsum(tmp6, (0, 1, 2, 3), t2, (0, 1, 2, 4), (4, 3))
    del tmp6
    tmp11 = einsum(tmp10, (0, 1), t2, (2, 1, 3, 4), (2, 0, 4, 3)) * 0.5
    del tmp10
    tmp5 = einsum(tmp0, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    tmp8 = einsum(t2, (0, 1, 2, 3), tmp7, (4, 2), (0, 1, 3, 4))
    del tmp7
    tmp1 = einsum(v.ovov, (0, 1, 2, 3), t2, (4, 2, 5, 3), (4, 0, 5, 1))
    tmp3 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 5, 2), (0, 4, 3, 5))
    tmp2 = einsum(t2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2))
    tmp12 = np.copy(tmp5) * 2
    del tmp5
    tmp12 += np.transpose(tmp8, (1, 0, 2, 3))
    del tmp8
    tmp12 += np.transpose(tmp11, (0, 1, 3, 2))
    del tmp11
    tmp15 = np.copy(np.transpose(v.ovov, (0, 2, 1, 3))) * 0.5
    tmp15 += v.oovv * -0.25
    tmp15 += tmp1
    tmp13 = einsum(f.oo, (0, 1), t2, (2, 1, 3, 4), (0, 2, 3, 4))
    tmp4 = np.copy(tmp2)
    del tmp2
    tmp4 += tmp3 * -1
    del tmp3
    tmp14 = np.copy(np.transpose(v.ovov, (0, 2, 1, 3))) * -1
    tmp14 += tmp0
    t2new = einsum(v.vvvv, (0, 1, 2, 3), t2, (4, 5, 1, 3), (4, 5, 0, 2))
    t2new += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 5, 3), (0, 4, 2, 5)) * -1
    t2new += np.transpose(tmp0, (1, 0, 3, 2)) * -1
    del tmp0
    t2new += tmp1 * 2
    del tmp1
    t2new += np.transpose(v.ovov, (0, 2, 1, 3))
    t2new += einsum(v.oooo, (0, 1, 2, 3), t2, (3, 1, 4, 5), (0, 2, 5, 4))
    t2new += np.transpose(tmp4, (0, 1, 3, 2))
    t2new += np.transpose(tmp4, (1, 0, 2, 3))
    del tmp4
    t2new += tmp12 * -1
    t2new += np.transpose(tmp12, (1, 0, 3, 2)) * -1
    del tmp12
    t2new += np.transpose(tmp13, (0, 1, 3, 2)) * -1
    t2new += np.transpose(tmp13, (1, 0, 2, 3)) * -1
    del tmp13
    t2new += einsum(t2, (0, 1, 2, 3), tmp14, (4, 1, 5, 2), (0, 4, 3, 5))
    del tmp14
    t2new += einsum(t2, (0, 1, 2, 3), tmp15, (4, 1, 5, 3), (4, 0, 5, 2)) * 4
    del tmp15

    return {f"t2new": t2new}


"""
Code generated by `albert`:
https://github.com/obackhouse/albert

  * date: 2024-08-09T22:08:28.706685
  * python version: 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
  * albert version: 0.0.0
  * caller: /opt/hostedtoolcache/Python/3.10.14/x64/lib/python3.10/site-packages/albert/codegen/einsum.py
  * node: fv-az1487-369
  * system: Linux
  * processor: x86_64
  * release: 6.5.0-1025-azure
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, direct_sum, Namespace


def energy(t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-09T22:08:28.967393.

    Parameters
    ----------
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    e_cc : float
        Coupled cluster energy.
    """

    e_cc = einsum(v.ovov, (0, 1, 2, 3), t2, (0, 2, 1, 3), ()) * 2
    e_cc += einsum(t2, (0, 1, 2, 3), v.ovov, (0, 3, 1, 2), ()) * -1

    return e_cc

def update_amps(f=None, t2=None, v=None, **kwargs):
    """
    Code generated by `albert` 0.0.0 on 2024-08-09T22:08:32.124627.

    Parameters
    ----------
    f : array
        Fock matrix.
    t2 : array
        T2 amplitudes.
    v : array
        Electron repulsion integrals.

    Returns
    -------
    t2new : array
        Updated T2 residuals.
    """

    tmp9 = v.ovov.transpose((0, 2, 3, 1)).copy() * -0.5
    tmp9 += v.ovov.transpose((0, 2, 1, 3))
    tmp6 = v.ovov.transpose((0, 2, 3, 1)).copy()
    tmp6 += v.ovov.transpose((0, 2, 1, 3)) * -0.5
    tmp0 = einsum(t2, (0, 1, 2, 3), v.ovov, (4, 5, 1, 2), (0, 4, 3, 5))
    t2new = tmp0.transpose((1, 0, 3, 2)).copy() * -1
    tmp10 = einsum(t2, (0, 1, 2, 3), tmp9, (1, 4, 3, 2), (0, 4)) * 2
    del tmp9
    tmp7 = einsum(t2, (0, 1, 2, 3), tmp6, (0, 1, 3, 4), (2, 4))
    del tmp6
    tmp3 = einsum(v.oovv, (0, 1, 2, 3), t2, (4, 1, 3, 5), (4, 0, 5, 2))
    tmp2 = einsum(t2, (0, 1, 2, 3), f.vv, (4, 3), (0, 1, 4, 2))
    tmp5 = einsum(t2, (0, 1, 2, 3), tmp0, (4, 1, 5, 3), (0, 4, 2, 5))
    tmp11 = einsum(t2, (0, 1, 2, 3), tmp10, (4, 1), (0, 4, 3, 2)) * 0.5
    del tmp10
    tmp8 = einsum(tmp7, (0, 1), t2, (2, 3, 1, 4), (2, 3, 4, 0))
    del tmp7
    tmp1 = einsum(t2, (0, 1, 2, 3), v.ovov, (4, 5, 1, 3), (0, 4, 2, 5))
    t2new += tmp1.transpose((1, 0, 3, 2)) * 2
    tmp14 = v.ovov.transpose((0, 2, 1, 3)).copy() * -1
    tmp14 += tmp0
    del tmp0
    t2new += einsum(t2, (0, 1, 2, 3), tmp14, (4, 1, 5, 2), (0, 4, 3, 5))
    del tmp14
    tmp4 = tmp2.copy()
    del tmp2
    tmp4 += tmp3 * -1
    del tmp3
    t2new += tmp4.transpose((1, 0, 2, 3))
    t2new += tmp4.transpose((0, 1, 3, 2))
    del tmp4
    tmp12 = tmp5.copy() * 2
    del tmp5
    tmp12 += tmp8.transpose((1, 0, 2, 3))
    del tmp8
    tmp12 += tmp11.transpose((0, 1, 3, 2))
    del tmp11
    t2new += tmp12.transpose((1, 0, 3, 2)) * -1
    t2new += tmp12 * -1
    del tmp12
    tmp13 = einsum(t2, (0, 1, 2, 3), f.oo, (4, 1), (4, 0, 2, 3))
    t2new += tmp13.transpose((1, 0, 2, 3)) * -1
    t2new += tmp13.transpose((0, 1, 3, 2)) * -1
    del tmp13
    tmp15 = v.ovov.transpose((0, 2, 1, 3)).copy() * 2
    tmp15 += v.oovv * -1
    tmp15 += tmp1 * 4
    del tmp1
    t2new += einsum(tmp15, (0, 1, 2, 3), t2, (4, 1, 5, 3), (4, 0, 5, 2))
    del tmp15
    t2new += einsum(v.oooo, (0, 1, 2, 3), t2, (3, 1, 4, 5), (0, 2, 5, 4))
    t2new += einsum(v.vvvv, (0, 1, 2, 3), t2, (4, 5, 1, 3), (4, 5, 0, 2))
    t2new += v.ovov.transpose((0, 2, 1, 3))
    t2new += einsum(t2, (0, 1, 2, 3), v.oovv, (4, 1, 5, 3), (4, 0, 5, 2)) * -1

    return {f"t2new": t2new}


"""Code generated by `albert` version 0.0.0.

 * date: 2024-12-19T15:11:05.235686
 * python version: 3.10.15 (main, Sep  9 2024, 03:03:06) [GCC 13.2.0]
 * albert version: 0.0.0
 * caller: /opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/albert/code/einsum.py
 * node: fv-az1676-657
 * system: Linux
 * processor: x86_64
 * release: 6.8.0-1017-azure
"""

from ebcc import numpy as np
from ebcc.util import pack_2e, einsum, dirsum, Namespace


def energy(t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        t2: 
        v: 

    Returns:
        e_cc: 
    """

    e_cc = einsum(t2, (0, 1, 2, 3), v.oovv, (0, 1, 2, 3), ()) * 0.25

    return e_cc

def make_rdm1_f(l2=None, t2=None, δ=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        l2: 
        t2: 
        δ: 

    Returns:
        rdm1: 
    """

    δ = Namespace()
    δ.oo = np.eye(t2.shape[0])
    δ.vv = np.eye(t2.shape[-1])

    rdm1 = Namespace()
    rdm1.oo = np.copy(δ.oo)
    rdm1.oo += einsum(l2, (0, 1, 2, 3), t2, (4, 3, 0, 1), (4, 2)) * -0.5
    rdm1.vv = einsum(t2, (0, 1, 2, 3), l2, (4, 3, 0, 1), (4, 2)) * 0.5

    rdm1.ov = np.zeros((t2.shape[0], t2.shape[-1]))
    rdm1.vo = np.zeros((t2.shape[-1], t2.shape[0]))
    rdm1 = np.block([[rdm1.oo, rdm1.ov], [rdm1.vo, rdm1.vv]])

    return rdm1

def make_rdm2_f(l2=None, t2=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        l2: 
        t2: 

    Returns:
        rdm2: 
    """


    rdm2 = Namespace()
    rdm2.oovv = np.copy(t2)
    rdm2.vvoo = np.copy(l2)

    rdm2.oooo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.ooov = np.zeros((t2.shape[0], t2.shape[0], t2.shape[0], t2.shape[-1]))
    rdm2.oovo = np.zeros((t2.shape[0], t2.shape[0], t2.shape[-1], t2.shape[0]))
    rdm2.ovoo = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[0], t2.shape[0]))
    rdm2.ovov = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[0], t2.shape[-1]))
    rdm2.ovvo = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[-1], t2.shape[0]))
    rdm2.ovvv = np.zeros((t2.shape[0], t2.shape[-1], t2.shape[-1], t2.shape[-1]))
    rdm2.vooo = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[0], t2.shape[0]))
    rdm2.voov = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[0], t2.shape[-1]))
    rdm2.vovo = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[-1], t2.shape[0]))
    rdm2.vovv = np.zeros((t2.shape[-1], t2.shape[0], t2.shape[-1], t2.shape[-1]))
    rdm2.vvov = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[0], t2.shape[-1]))
    rdm2.vvvo = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[-1], t2.shape[0]))
    rdm2.vvvv = np.zeros((t2.shape[-1], t2.shape[-1], t2.shape[-1], t2.shape[-1]))
    rdm2 = pack_2e(rdm2.oooo, rdm2.ooov, rdm2.oovo, rdm2.ovoo, rdm2.vooo, rdm2.oovv, rdm2.ovov, rdm2.ovvo, rdm2.voov, rdm2.vovo, rdm2.vvoo, rdm2.ovvv, rdm2.vovv, rdm2.vvov, rdm2.vvvo, rdm2.vvvv).transpose((0, 2, 1, 3))
    rdm1 = make_rdm1_f(t2=t2, l2=l2)
    delta = np.diag(np.concatenate([np.ones(t2.shape[0]), np.zeros(t2.shape[-1])]))
    rdm1 -= delta
    rdm2 += einsum(delta, (0, 1), rdm1, (3, 2), (0, 1, 2, 3))
    rdm2 += einsum(rdm1, (1, 0), delta, (2, 3), (0, 1, 2, 3))
    rdm2 -= einsum(delta, (0, 3), rdm1, (2, 1), (0, 1, 2, 3))
    rdm2 -= einsum(rdm1, (0, 3), delta, (1, 2), (0, 1, 2, 3))
    rdm2 += einsum(delta, (0, 1), delta, (2, 3), (0, 1, 2, 3))
    rdm2 -= einsum(delta, (0, 3), delta, (1, 2), (0, 1, 2, 3))

    return rdm2

def hbar_matvec_ip_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp1: 
    """

    tmp1 = np.copy(np.transpose(f.oo, (1, 0)))
    tmp0 = einsum(t2, (0, 1, 2, 3), v.oovv, (4, 0, 2, 3), (1, 4)) * -1
    tmp1 += tmp0 * 0.25
    tmp1 += np.transpose(tmp0, (1, 0)) * 0.25
    del tmp0

    return {"tmp1": tmp1}

def hbar_matvec_ip(f=None, ints=None, r1=None, r2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(ints.tmp1, (0, 1), r1, (0,), (1,)) * -1
    r1new += einsum(v.ooov, (0, 1, 2, 3), r2, (0, 1, 3), (2,)) * -0.5
    r2new = einsum(r1, (0,), v.ooov, (1, 2, 0, 3), (2, 1, 3))
    r2new += einsum(r2, (0, 1, 2), f.vv, (3, 2), (1, 0, 3)) * -1
    tmp0 = einsum(r2, (0, 1, 2), f.oo, (3, 1), (3, 0, 2))
    r2new += tmp0
    r2new += np.transpose(tmp0, (1, 0, 2)) * -1
    del tmp0

    return {"r1new": r1new, "r2new": r2new}

def hbar_matvec_ea_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp1: 
    """

    tmp1 = np.copy(np.transpose(f.vv, (1, 0))) * -4
    tmp0 = einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 2), (4, 3)) * -1
    tmp1 += tmp0
    tmp1 += np.transpose(tmp0, (1, 0))
    del tmp0

    return {"tmp1": tmp1}

def hbar_matvec_ea(f=None, ints=None, r1=None, r2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(v.ovvv, (0, 1, 2, 3), r2, (2, 3, 0), (1,)) * -0.5
    r1new += einsum(ints.tmp1, (0, 1), r1, (0,), (1,)) * -0.25
    r2new = einsum(f.oo, (0, 1), r2, (2, 3, 1), (3, 2, 0))
    r2new += einsum(v.ovvv, (0, 1, 2, 3), r1, (1,), (3, 2, 0))
    tmp0 = einsum(r2, (0, 1, 2), f.vv, (3, 1), (2, 3, 0))
    r2new += np.transpose(tmp0, (1, 2, 0)) * -1
    r2new += np.transpose(tmp0, (2, 1, 0))
    del tmp0

    return {"r1new": r1new, "r2new": r2new}

def hbar_matvec_ee_intermediates(f=None, t2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        t2: 
        v: 

    Returns:
        tmp0: 
        tmp1: 
        tmp2: 
    """

    tmp0 = np.copy(np.transpose(v.ovov, (2, 0, 3, 1)))
    tmp0 += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 5, 2), (1, 4, 5, 3)) * -1
    tmp1 = np.copy(np.transpose(f.vv, (1, 0))) * 2
    tmp1 += einsum(v.oovv, (0, 1, 2, 3), t2, (0, 1, 4, 2), (3, 4))
    tmp2 = np.copy(np.transpose(f.oo, (1, 0))) * 2
    tmp2 += einsum(v.oovv, (0, 1, 2, 3), t2, (4, 0, 2, 3), (1, 4)) * -1

    return {"tmp0": tmp0, "tmp1": tmp1, "tmp2": tmp2}

def hbar_matvec_ee(f=None, ints=None, r1=None, r2=None, v=None, **kwargs):
    """Code generated by `albert` 0.0.0.

    Args:
        f: 
        ints: 
        r1: 
        r2: 
        v: 

    Returns:
        r1new: 
        r2new: 
    """

    r1new = einsum(v.ooov, (0, 1, 2, 3), r2, (0, 1, 4, 3), (2, 4)) * -0.5
    r1new += einsum(ints.tmp2, (0, 1), r1, (0, 2), (1, 2)) * -0.5
    r1new += einsum(r2, (0, 1, 2, 3), v.ovvv, (1, 4, 2, 3), (0, 4)) * -0.5
    r1new += einsum(r1, (0, 1), ints.tmp1, (1, 2), (0, 2)) * 0.5
    r1new += einsum(r1, (0, 1), ints.tmp0, (0, 2, 3, 1), (2, 3)) * -1
    tmp0 = einsum(r2, (0, 1, 2, 3), f.oo, (4, 1), (4, 0, 2, 3))
    tmp2 = np.copy(np.transpose(tmp0, (0, 1, 3, 2))) * -1
    del tmp0
    tmp1 = einsum(v.ovvv, (0, 1, 2, 3), r1, (4, 1), (4, 0, 2, 3))
    tmp2 += np.transpose(tmp1, (0, 1, 3, 2))
    del tmp1
    r2new = np.copy(tmp2)
    r2new += np.transpose(tmp2, (1, 0, 2, 3)) * -1
    del tmp2
    tmp3 = einsum(r1, (0, 1), v.ooov, (2, 3, 0, 4), (2, 3, 1, 4))
    tmp5 = np.copy(np.transpose(tmp3, (1, 0, 2, 3))) * -1
    del tmp3
    tmp4 = einsum(f.vv, (0, 1), r2, (2, 3, 4, 1), (2, 3, 0, 4))
    tmp5 += np.transpose(tmp4, (1, 0, 2, 3)) * -1
    del tmp4
    r2new += tmp5 * -1
    r2new += np.transpose(tmp5, (0, 1, 3, 2))
    del tmp5


    return {"r1new": r1new, "r2new": r2new}


import numpy as np
import math
import pyscf
from pyscf import ao2mo, gto, scf
from ebcc import ebccsd

# Set up ab initio system with random e-b couplings
mol = pyscf.M(
    atom = 'H 0 0 0; F 0 0 1.1',  # in Angstrom
    basis = '6-31G',
    symmetry = True,
    verbose=1
)

myhf = mol.RHF().run()
nmo = myhf.mo_coeff.shape[1]
nbos = 5
# Boson energies and couplings to AO density
gmat = np.random.random((nbos,nmo,nmo)) * 0.02
omega = np.random.random((nbos)) * 5.

# AO eri array passed in
eri = ao2mo.restore(1, myhf._eri, nmo)

# Options for thresholds, iterations and damping
options = {"ethresh":1e-10, 'tthresh':1e-9, 'max_iter':500, 'damp':0.3}

# Loop over different ebcc ansatz (rank of fermion operator, rank of boson operator, and rank of boson operator in the coupling to single excitations)
for rank in [(2,0,0), (2,1,1), (2,2,1), (2,2,2)]:
    for shift in [True, False]:
        # Loop over whether to evaluate in the bosonic basis or not (whether to remove couplings to MF density)
        cc = ebccsd.EBCCSD(mol, myhf, eri, options={'diis space': 8}, rank=rank, omega=omega, gmat=gmat, shift=shift, autogen_code=False)
        etot, e_corr = cc.kernel()
        print('EBCCSD correlation energy for rank {} and shift {}:   {}'.format(rank,shift,cc.e_corr))
        print('EBCCSD total energy', etot)
        
        # Compare results to unoptimized autogenerated code (and DIIS vs. non-diis)
        cc_autogen = ebccsd.EBCCSD(mol, myhf, eri, options=options, rank=rank, omega=omega, gmat=gmat, shift=shift, autogen_code=True)
        etot_auto, e_corr_auto = cc_autogen.kernel()

        if np.allclose(cc.e_corr, cc_autogen.e_corr):
            print('**********************************************************************')
            print('EXCELLENT: CCSD correlation energies agree between autogenerated code and optimized code')
            print('**********************************************************************')
        else:
            print('Auto vs. non-auto code correlation energies do not agree...')
            assert(np.allclose(cc.e_corr, cc_autogen.e_corr))
